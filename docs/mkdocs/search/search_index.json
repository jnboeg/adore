{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automated Driving Open Research (ADORe)","text":"<p>Eclipse ADORe is a ROS 2 \ud83d\udd17 based modular software library and toolkit for decision making, planning, control and simulation of automated vehicles.  ADORe provides:</p> <ul> <li>Algorithms and data models applied in real automated driving system for motion planning and control</li> <li>Mechanisms for safe interaction with other CAVs, infrastructure, traffic management, interactions with human-driven vehicles, bicyclists, pedestrians</li> <li>Integration with typical tools and formats such as ROS, SUMO, CARLA, OpenDrive, Road2Simulation, ITS-G5 V2X (MAPEM, SPATEM, DENM, MCM, SREM)</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>An ADORe control system works in concert with a perception stack (not provided) to control an autonomous vehicle platform. Using V2X radio messages, a list of detected objects and ego vehicle position and velocity, the ADORe control system provides control inputs to a vehicle platform in order to steer it along a given high-definition roadmap to the desired goal location. </p>"},{"location":"#example-application","title":"Example application","text":"<p>The following video shows an automated vehicle controlled by ADORe in an urban setting in Braunschweig, Germany: </p>"},{"location":"#adore-in-action","title":"ADORe In Action","text":"<p>Here you can see one of our automated test vehicles being operated by ADORe: </p>"},{"location":"#example-application_1","title":"Example application","text":"<p>The following video shows an automated vehicle controlled by ADORe in an urban setting in Braunschweig, Germany: </p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>In order to get started, it is advised to first check system requirements, follow the installation instruction and then try out the demo scenarios.</p> <ul> <li>System Requirements</li> <li>Installation and getting started</li> <li>Technical Reference Manual</li> <li>Troubleshooting</li> <li>How to contribute</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>ADORe is proudly open source. Sponsor features by sending a pull request .  We would also love to know how you are using ADORe reach out to us on GitHub.</p> <p>Did you find a bug? Then submit a GitHub issue \ud83d\udd17 or provide a solution by  sending a pull request \ud83d\udd17, contributions are welcome!</p>"},{"location":"about_adore/","title":"Automated Driving Open Research (ADORe)","text":"<p>Eclipse ADORe is a ROS 2 \ud83d\udd17 based modular software library and toolkit for decision making, planning, control and simulation of automated vehicles.  ADORe provides:</p> <ul> <li>Algorithms and data models applied in real automated driving system for motion planning and control</li> <li>Mechanisms for safe interaction with other CAVs, infrastructure, traffic management, interactions with human-driven vehicles, bicyclists, pedestrians</li> <li>Integration with typical tools and formats such as ROS, SUMO, CARLA, OpenDrive, Road2Simulation, ITS-G5 V2X (MAPEM, SPATEM, DENM, MCM, SREM)</li> </ul>"},{"location":"about_adore/#overview","title":"Overview","text":"<p>An ADORe control system works in concert with a perception stack (not provided) to control an autonomous vehicle platform. Using V2X radio messages, a list of detected objects and ego vehicle position and velocity, the ADORe control system provides control inputs to a vehicle platform in order to steer it along a given high-definition roadmap to the desired goal location. </p>"},{"location":"about_adore/#example-application","title":"Example application","text":"<p>The following video shows an automated vehicle controlled by ADORe in an urban setting in Braunschweig, Germany: </p>"},{"location":"about_adore/#adore-in-action","title":"ADORe In Action","text":"<p>Here you can see one of our automated test vehicles being operated by ADORe: </p>"},{"location":"about_adore/#example-application_1","title":"Example application","text":"<p>The following video shows an automated vehicle controlled by ADORe in an urban setting in Braunschweig, Germany: </p>"},{"location":"about_adore/#next-steps","title":"Next Steps","text":"<p>In order to get started, it is advised to first check system requirements, follow the installation instruction and then try out the demo scenarios.</p> <ul> <li>System Requirements</li> <li>Installation and getting started</li> <li>Technical Reference Manual</li> <li>Troubleshooting</li> <li>How to contribute</li> </ul>"},{"location":"contact/","title":"Contact","text":"<p>If you have questions, need support, or have other inquiries please reach out to us. We are proudly open source and are interested to discover how you are using ADORe or components of ADORe. We are eager to hear from you!</p> <p>Email: opensource-ts@dlr.de</p>"},{"location":"document_admonition_templates/","title":"Document admonition templates","text":"<p>\u26a0\ufe0f WARNING: Doh this ain't good.</p> <p>\u274cERROR: BAD BAD BAD ERROR</p> <p>\u2139\ufe0fINFO: Some info.</p> <p>\u2705SUCCESS: Some good thing.</p>"},{"location":"licensing/","title":"Licensing","text":"<p>Unless otherwise stated by another license all ADORe components, libraries, submodules, and project are under the  Eclipse Public License - v 2.0  </p>"},{"location":"modules/","title":"Submodules","text":""},{"location":"modules/#module-quick-reference","title":"Module Quick Reference","text":"<p>This section contains an auto-generated aggregation of all README.md files for every submoduled within ADORe.</p> <p>\u26a0\ufe0f WARNING: The following README.md aggregation could be outdated and likely to have many broken links. This is intended to only be a quick reference. Please always  follow the individual submodules URLs for the most up-to-date documentation. </p>"},{"location":"modules/#module-adore_libraries","title":"Module: adore_libraries","text":"<p>git remote: git@github.com:DLR-TS/adore_libraries.git</p> <p>url: https://github.com/DLR-TS/adore_libraries \ud83d\udd17</p>"},{"location":"modules/#adore_libraries-readme-links","title":"adore_libraries README Links","text":"<p>adore_libraries/lib/adore_controllers/README.md \ud83d\udd17</p> <p>adore_libraries/lib/adore_dynamics/README.md \ud83d\udd17</p> <p>adore_libraries/lib/adore_map/README.md \ud83d\udd17</p> <p>adore_libraries/lib/adore_math/README.md \ud83d\udd17</p> <p>adore_libraries/lib/adore_planning/README.md \ud83d\udd17</p> <p>adore_libraries/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore","title":"Module: adore","text":"<p>git remote: git@github.com:jnboeg/adore.git</p> <p>url: https://github.com/jnboeg/adore \ud83d\udd17</p>"},{"location":"modules/#adore-readme-links","title":"adore README Links","text":"<p>adore/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_decision_maker","title":"Module: adore_decision_maker","text":"<p>git remote: git@github.com:DLR-TS/adore_decision_maker.git</p> <p>url: https://github.com/DLR-TS/adore_decision_maker \ud83d\udd17</p>"},{"location":"modules/#adore_decision_maker-readme-links","title":"adore_decision_maker README Links","text":"<p>adore_decision_maker/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_1","title":"Module: adore","text":"<p>git remote: git@github.com:jnboeg/adore.git</p> <p>url: https://github.com/jnboeg/adore \ud83d\udd17</p>"},{"location":"modules/#adore-readme-links_1","title":"adore README Links","text":"<p>adore/ros2_workspace/src/example_nodes/cpp_publisher_subscriber_template/README.md \ud83d\udd17</p> <p>adore/ros2_workspace/src/example_nodes/README.md \ud83d\udd17</p> <p>adore/ros2_workspace/src/example_nodes/ros2_eigen_hello_world/README.md \ud83d\udd17</p> <p>adore/ros2_workspace/src/example_nodes/ros2_hello_world/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_mission_control","title":"Module: adore_mission_control","text":"<p>git remote: git@github.com:DLR-TS/adore_mission_control.git</p> <p>url: https://github.com/DLR-TS/adore_mission_control \ud83d\udd17</p>"},{"location":"modules/#adore_mission_control-readme-links","title":"adore_mission_control README Links","text":"<p>adore_mission_control/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_ros2_msgs","title":"Module: adore_ros2_msgs","text":"<p>git remote: git@github.com:DLR-TS/adore_ros2_msgs.git</p> <p>url: https://github.com/DLR-TS/adore_ros2_msgs \ud83d\udd17</p>"},{"location":"modules/#adore_ros2_msgs-readme-links","title":"adore_ros2_msgs README Links","text":"<p>adore_ros2_msgs/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_2","title":"Module: adore","text":"<p>git remote: git@github.com:jnboeg/adore.git</p> <p>url: https://github.com/jnboeg/adore \ud83d\udd17</p>"},{"location":"modules/#adore-readme-links_2","title":"adore README Links","text":"<p>adore/ros2_workspace/src/ros2_syslog/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_simulated_vehicle","title":"Module: adore_simulated_vehicle","text":"<p>git remote: git@github.com:DLR-TS/adore_simulated_vehicle.git</p> <p>url: https://github.com/DLR-TS/adore_simulated_vehicle \ud83d\udd17</p>"},{"location":"modules/#adore_simulated_vehicle-readme-links","title":"adore_simulated_vehicle README Links","text":"<p>adore_simulated_vehicle/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_trajectory_tracker","title":"Module: adore_trajectory_tracker","text":"<p>git remote: git@github.com:DLR-TS/adore_trajectory_tracker.git</p> <p>url: https://github.com/DLR-TS/adore_trajectory_tracker \ud83d\udd17</p>"},{"location":"modules/#adore_trajectory_tracker-readme-links","title":"adore_trajectory_tracker README Links","text":"<p>adore_trajectory_tracker/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_visualizer","title":"Module: adore_visualizer","text":"<p>git remote: git@github.com:DLR-TS/adore_visualizer.git</p> <p>url: https://github.com/DLR-TS/adore_visualizer \ud83d\udd17</p>"},{"location":"modules/#adore_visualizer-readme-links","title":"adore_visualizer README Links","text":"<p>adore_visualizer/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_cli","title":"Module: adore_cli","text":"<p>git remote: git@github.com:dlr-ts/adore_cli.git</p> <p>url: https://github.com/dlr-ts/adore_cli \ud83d\udd17</p>"},{"location":"modules/#adore_cli-readme-links","title":"adore_cli README Links","text":"<p>adore_cli/README.md \ud83d\udd17</p>"},{"location":"modules/#module-ci_teststand","title":"Module: ci_teststand","text":"<p>git remote: git@github.com:dlr-ts/ci_teststand.git</p> <p>url: https://github.com/dlr-ts/ci_teststand \ud83d\udd17</p>"},{"location":"modules/#ci_teststand-readme-links","title":"ci_teststand README Links","text":"<p>ci_teststand/README.md \ud83d\udd17</p>"},{"location":"modules/#module-lichtblick","title":"Module: lichtblick","text":"<p>git remote: https://github.com/Lichtblick-Suite/lichtblick.git</p> <p>url: https://github.com/Lichtblick-Suite/lichtblick \ud83d\udd17</p>"},{"location":"modules/#lichtblick-readme-links","title":"lichtblick README Links","text":"<p>lichtblick/benchmark/README.md \ud83d\udd17</p> <p>lichtblick/packages/suite-base/README.md \ud83d\udd17</p> <p>lichtblick/packages/suite-base/src/i18n/README.md \ud83d\udd17</p> <p>lichtblick/packages/suite-base/src/PanelAPI/README.md \ud83d\udd17</p> <p>lichtblick/packages/suite-base/src/panels/UserScriptEditor/theme/README.md \ud83d\udd17</p> <p>lichtblick/packages/suite-desktop/README.md \ud83d\udd17</p> <p>lichtblick/packages/suite/README.md \ud83d\udd17</p> <p>lichtblick/packages/suite-web/README.md \ud83d\udd17</p> <p>lichtblick/README.md \ud83d\udd17</p> <p>lichtblick/web/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_3","title":"Module: adore","text":"<p>git remote: git@github.com:jnboeg/adore.git</p> <p>url: https://github.com/jnboeg/adore \ud83d\udd17</p>"},{"location":"modules/#adore-readme-links_3","title":"adore README Links","text":"<p>adore/vendor/helix/README.md \ud83d\udd17</p>"},{"location":"modules/#module-json","title":"Module: json","text":"<p>git remote: https://github.com/nlohmann/json.git</p> <p>url: https://github.com/nlohmann/json \ud83d\udd17</p>"},{"location":"modules/#json-readme-links","title":"json README Links","text":"<p>json/docs/docset/README.md \ud83d\udd17</p> <p>json/docs/README.md \ud83d\udd17</p> <p>json/README.md \ud83d\udd17</p> <p>json/.reuse/README.md \ud83d\udd17</p> <p>json/tests/reports/2016-09-09-nativejson_benchmark/README.md \ud83d\udd17</p> <p>json/tools/amalgamate/README.md \ud83d\udd17</p> <p>json/tools/gdb_pretty_printer/README.md \ud83d\udd17</p> <p>json/tools/generate_natvis/README.md \ud83d\udd17</p> <p>json/tools/serve_header/README.md \ud83d\udd17</p>"},{"location":"modules/#module-libopendrive","title":"Module: libOpenDRIVE","text":"<p>git remote: git@github.com:markomiz/libOpenDRIVE.git</p> <p>url: https://github.com/markomiz/libOpenDRIVE \ud83d\udd17</p>"},{"location":"modules/#libopendrive-readme-links","title":"libOpenDRIVE README Links","text":"<p>libOpenDRIVE/README.md \ud83d\udd17</p>"},{"location":"modules/#module-mathematics_toolbox","title":"Module: mathematics_toolbox","text":"<p>git remote: git@github.com:DLR-TS/mathematics_toolbox.git</p> <p>url: https://github.com/DLR-TS/mathematics_toolbox \ud83d\udd17</p>"},{"location":"modules/#mathematics_toolbox-readme-links","title":"mathematics_toolbox README Links","text":"<p>mathematics_toolbox/README.md \ud83d\udd17</p>"},{"location":"modules/#module-optinlc","title":"Module: OptiNLC","text":"<p>git remote: git@github.com:DLR-TS/OptiNLC.git</p> <p>url: https://github.com/DLR-TS/OptiNLC \ud83d\udd17</p>"},{"location":"modules/#optinlc-readme-links","title":"OptiNLC README Links","text":"<p>OptiNLC/README.md \ud83d\udd17</p>"},{"location":"modules/#module-adore_4","title":"Module: adore","text":"<p>git remote: git@github.com:jnboeg/adore.git</p> <p>url: https://github.com/jnboeg/adore \ud83d\udd17</p>"},{"location":"modules/#adore-readme-links_4","title":"adore README Links","text":"<p>adore/vendor/README.md \ud83d\udd17</p>"},{"location":"problems_and_solutions/","title":"Problems and Solutions","text":"<p>This section will offer solutions to known issues.</p>"},{"location":"problems_and_solutions/#do-you-have-another-problem","title":"Do You Have Another Problem?","text":"<p>Have you encountered a problem that is not documented? Create an  issue \ud83d\udd17. Chances are if you are  having an issue someone else will encounter the same issue.  Help the community and help us document the issues to improve ADORe. We are eager to help you!</p>"},{"location":"quick_start/","title":"ADORe Quick Start","text":"<p>This is a quick start guide to getting up and running with ADORe with no fuss running the automated setup script.</p> <p>For manual setup or a deeper look into getting ADORe set up please review the  Getting Started guide.</p> <p>To setup and configure ADORe for a first run you can run the following setup script:</p> <pre><code>bash &lt;(curl -sSL https://raw.githubusercontent.com/DLR-TS/adore/master/tools/adore_setup.sh)\n</code></pre> <p>\u2139\ufe0fINFO: The ADORe setup script can run in non-interactive/unattended mode with: <code>bash &lt;(curl -sSL https://raw.githubusercontent.com/DLR-TS/adore/tools/adore_setup.sh) --headless</code></p> <p>This script will do the following:</p> <ul> <li>Verify that your system meets the minimum requirements to run ADORe </li> <li>Install the system dependencies GNU Make and Docker</li> <li>Clone ADORe to your home directory</li> <li>Build ADORe core components</li> </ul> <p>\u26a0\ufe0f WARNING: The automated ADORe setup script is only supported in Ubuntu!</p> <p>\u26a0\ufe0f  WARNING: As a general rule you should never run shell scripts from untrusted sources. </p>"},{"location":"software_license/","title":"Software license","text":"<p>Eclipse Public License - v 2.0</p> <pre><code>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE\nPUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION\nOF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n</code></pre> <ol> <li>DEFINITIONS</li> </ol> <p>\"Contribution\" means:</p> <p>a) in the case of the initial Contributor, the initial content      Distributed under this Agreement, and</p> <p>b) in the case of each subsequent Contributor:      i) changes to the Program, and      ii) additions to the Program;   where such changes and/or additions to the Program originate from   and are Distributed by that particular Contributor. A Contribution   \"originates\" from a Contributor if it was added to the Program by   such Contributor itself or anyone acting on such Contributor's behalf.   Contributions do not include changes or additions to the Program that   are not Modified Works.</p> <p>\"Contributor\" means any person or entity that Distributes the Program.</p> <p>\"Licensed Patents\" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.</p> <p>\"Program\" means the Contributions Distributed in accordance with this Agreement.</p> <p>\"Recipient\" means anyone who receives the Program under this Agreement or any Secondary License (as applicable), including Contributors.</p> <p>\"Derivative Works\" shall mean any work, whether in Source Code or other form, that is based on (or derived from) the Program and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship.</p> <p>\"Modified Works\" shall mean any work in Source Code or other form that results from an addition to, deletion from, or modification of the contents of the Program, including, for purposes of clarity any new file in Source Code form that contains any contents of the Program. Modified Works shall not include works that contain only declarations, interfaces, types, classes, structures, or files of the Program solely in each case in order to link to, bind by name, or subclass the Program or Modified Works thereof.</p> <p>\"Distribute\" means the acts of a) distributing or b) making available in any manner that enables the transfer of a copy.</p> <p>\"Source Code\" means the form of a Program preferred for making modifications, including but not limited to software source code, documentation source, and configuration files.</p> <p>\"Secondary License\" means either the GNU General Public License, Version 2.0, or any later versions of that license, including any exceptions or additional permissions as identified by the initial Contributor.</p> <ol> <li>GRANT OF RIGHTS</li> </ol> <p>a) Subject to the terms of this Agreement, each Contributor hereby   grants Recipient a non-exclusive, worldwide, royalty-free copyright   license to reproduce, prepare Derivative Works of, publicly display,   publicly perform, Distribute and sublicense the Contribution of such   Contributor, if any, and such Derivative Works.</p> <p>b) Subject to the terms of this Agreement, each Contributor hereby   grants Recipient a non-exclusive, worldwide, royalty-free patent   license under Licensed Patents to make, use, sell, offer to sell,   import and otherwise transfer the Contribution of such Contributor,   if any, in Source Code or other form. This patent license shall   apply to the combination of the Contribution and the Program if, at   the time the Contribution is added by the Contributor, such addition   of the Contribution causes such combination to be covered by the   Licensed Patents. The patent license shall not apply to any other   combinations which include the Contribution. No hardware per se is   licensed hereunder.</p> <p>c) Recipient understands that although each Contributor grants the   licenses to its Contributions set forth herein, no assurances are   provided by any Contributor that the Program does not infringe the   patent or other intellectual property rights of any other entity.   Each Contributor disclaims any liability to Recipient for claims   brought by any other entity based on infringement of intellectual   property rights or otherwise. As a condition to exercising the   rights and licenses granted hereunder, each Recipient hereby   assumes sole responsibility to secure any other intellectual   property rights needed, if any. For example, if a third party   patent license is required to allow Recipient to Distribute the   Program, it is Recipient's responsibility to acquire that license   before distributing the Program.</p> <p>d) Each Contributor represents that to its knowledge it has   sufficient copyright rights in its Contribution, if any, to grant   the copyright license set forth in this Agreement.</p> <p>e) Notwithstanding the terms of any Secondary License, no   Contributor makes additional grants to any Recipient (other than   those set forth in this Agreement) as a result of such Recipient's   receipt of the Program under the terms of a Secondary License   (if permitted under the terms of Section 3).</p> <ol> <li>REQUIREMENTS</li> </ol> <p>3.1 If a Contributor Distributes the Program in any form, then:</p> <p>a) the Program must also be made available as Source Code, in   accordance with section 3.2, and the Contributor must accompany   the Program with a statement that the Source Code for the Program   is available under this Agreement, and informs Recipients how to   obtain it in a reasonable manner on or through a medium customarily   used for software exchange; and</p> <p>b) the Contributor may Distribute the Program under a license   different than this Agreement, provided that such license:      i) effectively disclaims on behalf of all other Contributors all      warranties and conditions, express and implied, including      warranties or conditions of title and non-infringement, and      implied warranties or conditions of merchantability and fitness      for a particular purpose;</p> <pre><code> ii) effectively excludes on behalf of all other Contributors all\n liability for damages, including direct, indirect, special,\n incidental and consequential damages, such as lost profits;\n\n iii) does not attempt to limit or alter the recipients' rights\n in the Source Code under section 3.2; and\n\n iv) requires any subsequent distribution of the Program by any\n party to be under a license that satisfies the requirements\n of this section 3.\n</code></pre> <p>3.2 When the Program is Distributed as Source Code:</p> <p>a) it must be made available under this Agreement, or if the   Program (i) is combined with other material in a separate file or   files made available under a Secondary License, and (ii) the initial   Contributor attached to the Source Code the notice described in   Exhibit A of this Agreement, then the Program may be made available   under the terms of such Secondary Licenses, and</p> <p>b) a copy of this Agreement must be included with each copy of   the Program.</p> <p>3.3 Contributors may not remove or alter any copyright, patent, trademark, attribution notices, disclaimers of warranty, or limitations of liability (\"notices\") contained within the Program from any copy of the Program which they Distribute, provided that Contributors may add their own appropriate notices.</p> <ol> <li>COMMERCIAL DISTRIBUTION</li> </ol> <p>Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.</p> <p>For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.</p> <ol> <li>NO WARRANTY</li> </ol> <p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.</p> <ol> <li>DISCLAIMER OF LIABILITY</li> </ol> <p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT PERMITTED BY APPLICABLE LAW, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>GENERAL</li> </ol> <p>If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.</p> <p>If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.</p> <p>All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.</p> <p>Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be Distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to Distribute the Program (including its Contributions) under the new version.</p> <p>Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved. Nothing in this Agreement is intended to be enforceable by any entity that is not a Contributor or Recipient. No third-party beneficiary rights are created under this Agreement.</p> <p>Exhibit A - Form of Secondary Licenses Notice</p> <p>\"This Source Code may also be made available under the following  Secondary Licenses when the conditions for such availability set forth  in the Eclipse Public License, v. 2.0 are satisfied: {name license(s), version(s), and exceptions or additional permissions here}.\"</p> <p>Simply including a copy of this Agreement, including this Exhibit A   is not sufficient to license the Source Code under Secondary Licenses.</p> <p>If it is not possible or desirable to put the notice in a particular   file, then You may include the notice in a location (such as a LICENSE   file in a relevant directory) where a recipient would be likely to   look for such a notice.</p> <p>You may add additional accurate notices of copyright ownership.</p>"},{"location":"styleguide/","title":"Style Guide","text":""},{"location":"styleguide/#adore-style-guide","title":"ADORe Style Guide","text":"<p>For all applicable purposes the use of the ROS style guides is encouraged.</p> <p>There is one for C++ and one for Python.</p>"},{"location":"getting_started/building_adore/","title":"Building ADORe","text":"<p>\u26a0\ufe0f WARNING: To use the ADORe you must have Docker, and GNU Make installed and configured for you user. Review theGetting Started \ud83d\udd17 for information on ensuring  your system has the necessary prerequisites installed before proceeding.</p> <p>Once you have cloned adore with the Cloning ADORe \ud83d\udd17 guide you are ready to build the ADORe Docker context known as the ADORe CLI. In the base of the ADORe repository you can run:</p> <pre><code>make build\n</code></pre> <p>\u2139\ufe0fINFO: On first run of the ADORe CLI the entire system will be built.  Initial build can take 10-15 minutes depending on system and network. </p>"},{"location":"getting_started/cloning_adore/","title":"Cloning the ADORe repository","text":"<p>This guild will show you how to properly clone the ADORe repository</p> <p>\u2139\ufe0fINFO: By default this guide assumes you have ssh keys configured for GitHub your GitHub account. For help on configuring your ssh keys visit: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account</p> <pre><code>git clone git@github.com:DLR-TS/adore.git\ncd adore\ngit submodule update --init --recursive\n</code></pre> <p>\u26a0\ufe0f WARNING: Failing to update and recursively clone the submodules will result in build failures!</p> <p>\u2139\ufe0fINFO: If you would rather clone ADORe anonymously over https please review the Anonymous Cloning \ud83d\udd17 guide.</p>"},{"location":"getting_started/getting_started/","title":"Getting Started","text":"<p>This guide will help you get your system set up and configured to run ADORe.</p> <ol> <li> <p>First review the System Requirements \ud83d\udd17. </p> </li> <li> <p>Next review the Prerequisites \ud83d\udd17 </p> </li> <li> <p>After installing GNU Make and Docker you are ready to clone the repository \ud83d\udd17 </p> </li> <li> <p>Build ADORe and ADORe CLI with the Building ADORe \ud83d\udd17 guide </p> </li> </ol> <p>After cloning and satisfying all system prerequisites and building ADORe you can start the ADORe CLI interactive shell docker context To do this navigate to the root of the ADORe repository directory and run the following command:</p> <pre><code>make cli\n</code></pre> <p>\u2705 SUCCESS: If you are greeted with the following ADORe CLI car then you have successfully setup ADORe:</p> <pre><code>            ____ \n         __/  |_\\__\n        |           -. \n  ......'-(_)---(_)--' \n</code></pre> <p>\u2705 INFO: Next steps...</p>"},{"location":"getting_started/installing_docker/","title":"Installing Docker","text":"<p>The ADORe build system sometimes uses experimental features of docker.  For this reason it is important to have a recent version of docker installed.  Using \"apt-get\" or \"apt\" to install Docker is not sufficient. Software packages within the Ubuntu central repositories are always very old.</p> <p>\u26a0\ufe0f  WARNING: ADORe depends on docker compose &gt;= v2. If you do not have docker compose &gt;= v2 installed your build will fail. The command line tool <code>docker-compose</code> was renamed to <code>docker compose</code>. Install the latest docker to resolve this issue. For more information view the following stack overflow issue: https://stackoverflow.com/questions/66514436/difference-between-docker-compose-and-docker-compose \ud83d\udd17</p>"},{"location":"getting_started/installing_docker/#installing-docker-ubuntu-2004-and-2204","title":"Installing Docker: Ubuntu 20.04 and 22.04","text":"<p>To install the latest version of docker in Ubuntu 20.04 and 22.04 you can follow the official Docker document at: https://docs.docker.com/engine/install/ubuntu/ \ud83d\udd17</p> <p>Alternatively, ADORe provides a shell script that you can use to install the latest Docker. </p> <pre><code>curl -sSL https://raw.githubusercontent.com/DLR-TS/adore_tools/master/tools/install_docker.sh | bash -\n</code></pre> <p>Follow the prompts until the installation completes. Once complete you should be greeted with something such as this:</p> <pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n</code></pre> <p>\u26a0\ufe0f  WARNING: As a general rule you should never run shell scripts from untrusted sources. </p> <p>\u2139\ufe0f INFO: After installing Docker you may need to log out and log back in to make group changes take effect.</p>"},{"location":"getting_started/installing_docker/#verifying-your-docker-group","title":"Verifying your Docker group","text":"<p>In order for you to be able to run any docker commands your current user must be a member of the docker group. This occurs during installation but will not  take effect until you log out and log back in again. To verify you are a member of the docker group run: <code>id | sed \"s|,|\\n|g\" | grep docker</code></p> <p>Which should yield something similar to:</p> <pre><code>998(docker)\n</code></pre>"},{"location":"getting_started/installing_docker/#verifying-your-docker-installation","title":"Verifying your docker installation","text":"<p>At any time you can verify your docker installation by running the docker hello world image with the following:</p> <pre><code>docker run hello-world\n</code></pre> <p>Which will yield:</p> <pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n</code></pre> <p>\u2139\ufe0f INFO: After installing Docker you may need to log out and log back in to make group changes take effect.</p> <p>\u2139\ufe0f INFO: The ADORe build system depends on <code>docker compose</code>. At some point the <code>docker compose</code> tool was renamed from <code>docker-compose</code> to <code>docker compose</code>. If you have an older version of docker you will receive an error. Please update your Docker engine.</p>"},{"location":"getting_started/prerequisites/","title":"ADORe Prerequisites","text":"<p>ADORe requires a recent version of make and Docker on your system. ADORe is officially supported in Ubuntu 20.04 and 22.04. The following document applies to that.</p>"},{"location":"getting_started/prerequisites/#check-your-system","title":"Check your system","text":"<p>Check to make sure you have a supported system by running the following command:</p> <pre><code>cat /etc/os-release | grep \"VERSION=\" | cut -d\"=\" -f2\n</code></pre> <p>should yield something such as the following:</p> <pre><code>\"22.04.2 LTS (Jammy Jellyfish)\"\n</code></pre> <p>In principle, any x86 Linux operating system supporting Docker and Make will run ADORe however installation steps for all the tooling will differ. </p>"},{"location":"getting_started/prerequisites/#installing-make","title":"Installing make","text":"<pre><code>sudo apt-get install -y make\n</code></pre>"},{"location":"getting_started/prerequisites/#installing-docker","title":"Installing Docker","text":"<p>Review the Installing Docker \ud83d\udd17 </p>"},{"location":"getting_started/prerequisites/#checking-your-free-space","title":"Checking your free space","text":"<p>ADORe and the associated tools require a significant amount of transient storage It is recommended that you have a minimum of 20 GB of free space to work with ADORe. Optimally, you should have at least 40 GB. To check the amount of free space on your system you can run the following command:</p> <pre><code>df -h . | awk 'NR==2 {print \"Available Free Space:\", $4}'\n</code></pre>"},{"location":"getting_started/prerequisites/#time","title":"Time","text":"<p>On the first build of ADORe you will need ~15-20 minutes to download and clone  all the sources, dependencies, and context.  Subsequent builds are very quick  after requisite caches (apt, docker) have been established.</p> <p>\u2139\ufe0f INFO: Build and fetch times can very greatly depending on system configuration and network.</p>"},{"location":"getting_started/prerequisites/#conclusion","title":"Conclusion","text":"<p>Once you have to correct operating system, adequate free space, as well as, have make and docker installed you are good to proceed with using ADORe. </p>"},{"location":"getting_started/system_requirements/","title":"System Requirements","text":"<p>The following section will detail the recommended hardware/system configuration, as well as, required software configuration in order to build and run ADORe and it's components.</p>"},{"location":"getting_started/system_requirements/#minimum-system-configurations","title":"Minimum System Configurations","text":"<p>CPU: </p> <ul> <li>Intel CORE i7 7700K or equivalent/better</li> <li>The more cores you have, the more trajectory planners you can run in    parallel.</li> <li>No specific graphics card is required as everything (except plotting) runs on    the CPU</li> <li>Any x86 base equivalent processor (ARM support is planned)</li> </ul> <p>RAM: </p> <p>Min 8GB for execution. Compilation process is faster with 16+GB</p> <p>HD storage:</p> <ul> <li>at least 2.5 GB to clone the repository</li> <li>at least 15 GB to build all necessary docker context</li> </ul> <p>Operating system: </p> <ul> <li>Anything that supports newer docker versions. </li> <li>Recommended: Ubuntu 20.04 or 22.04</li> </ul> <p>Network:</p> <p>A reliable network with high throughput and low latency. Initial    build can take a significant amount of time to pull all necessary dependencies   from apt and docker. A poor connection will result in non-deterministic build    failures. </p>"},{"location":"getting_started/system_requirements/#software-requirements","title":"Software Requirements","text":"<ul> <li>Docker \ud83d\udd17 v20.10.17 or greater and docker compose v2.6.0 or greater. To install   the latest docker and docker compose run the following command:</li> </ul> <pre><code>curl -sSL https://raw.githubusercontent.com/DLR-TS/adore_tools/master/tools/install_docker.sh | bash`. \n</code></pre> <p>For more information review the official docker documentation: https://docs.docker.com/engine/install/ubuntu/ \ud83d\udd17</p> <p>\u26a0\ufe0f WARNING: As a general rule you should never run shell scripts from untrusted sources. </p> <ul> <li>GNU Make \ud83d\udd17 is the backbone of the ADORe build system and is also required.</li> </ul>"},{"location":"licensing/license_check/","title":"License check","text":""},{"location":"licensing/license_check/#how-to-check-licenses","title":"How to check licenses","text":"<p>Ubuntu comes with a license checker:</p> <pre><code> sudo apt-get install licensecheck\n</code></pre> <p>Before checking license, remove unnecessary files for release</p> <pre><code>./tools/release_purge.sh\n</code></pre> <p>Check for files, which do not contain EPL-2.0:  Run the following in adore folder.</p> <pre><code>licensecheck . -r|egrep -ve \".png|.gif|.r2s|.jpg|build|sumo|java_v2x|.cmake|CMakeFiles|.gitlab-ci.yml|.vscode|Eclipse Public License 2.0\"\n</code></pre>"},{"location":"modules/OptiNLC/","title":"OptiNLC","text":"<p>A C++ library implementing Sequential Quadratic Programming With a docker build and run environment</p> <p>OptiNLC (Optimization of Non-Linear Control) is an open-source toolbox designed for solving optimization control problems. This documentation provides an overview of optimization problems, optimization control problems, and a guide on how to use the OptiNLC toolbox.</p>"},{"location":"modules/OptiNLC/#getting-started","title":"Getting Started","text":"<p>Docker and make required to package and build OptiNLC</p> <ol> <li>Clone the repo</li> <li>Clone the submodules</li> </ol> <pre><code>git submodule update --init --recursive\n</code></pre>"},{"location":"modules/OptiNLC/#running-the-example-program","title":"Running the example program","text":"<pre><code>make run\n</code></pre>"},{"location":"modules/OptiNLC/#running-unit-tests","title":"Running unit tests","text":"<pre><code>make test\n</code></pre>"},{"location":"modules/OptiNLC/#optinlc-toolbox-documentation","title":"OptiNLC Toolbox Documentation","text":""},{"location":"modules/OptiNLC/#introduction","title":"Introduction","text":"<p>OptiNLC (Optimization of Non-Linear Control) is an open-source toolbox designed for solving optimization control problems. This documentation provides an overview of optimization problems, optimization control problems, and a guide on how to use the OptiNLC toolbox.</p>"},{"location":"modules/OptiNLC/#optimization-problem","title":"Optimization Problem","text":"<p>An optimization problem involves finding the best solution from a set of feasible solutions. It consists of an objective function to be minimized or maximized, subject to a set of constraints. The goal is to identify the input values that result in the optimal value of the objective function.</p>"},{"location":"modules/OptiNLC/#optimization-control-problem","title":"Optimization Control Problem","text":"<p>Optimization control problems extend the concept of optimization to dynamic systems. In these problems, the goal is to find the optimal control inputs over a given time horizon to drive a dynamic system to an optimal state while satisfying constraints.</p>"},{"location":"modules/OptiNLC/#optinlc-toolbox","title":"OptiNLC Toolbox","text":"<p>The OptiNLC toolbox is designed to handle optimization control problems efficiently. Below is an example template demonstrating the usage of the toolbox.</p> <p>```cpp // ... (Same code as provided in the previous response)</p>"},{"location":"modules/adore/","title":"Automated Driving Open Research (ADORe)","text":""},{"location":"modules/adore/#about-adore","title":"About ADORe","text":"<p>Eclipse ADORe is a modular software library and toolkit for decision making, planning, control and simulation of  automated vehicles. It is developed by The German Aerospace Center (DLR),   Institute for Transportation Systems \ud83d\udd17.</p> <p>ADORe provides some of the following features and capabilities: - Algorithms and data models applied in real automated driving system for  motion planning and control - Mechanisms for safe interaction with other CAVs, infrastructure, traffic  management, interactions with human-driven vehicles, bicyclists, pedestrians  - ADORe is ROS 2 \ud83d\udd17 based  - ADORe is fully containerized using Docker \ud83d\udd17  - ADORe is currently deployed on DLR TS institute research vehicles FASCar \ud83d\udd17 and VIEWCar II\ud83d\udd17</p> <p>An ADORe control system works in concert with a perception stack (not provided) to control an autonomous vehicle  platform. Using V2X radio messages, a list of detected objects and ego vehicle position and velocity, the ADORe control system  provides control inputs to a vehicle platform in order to steer it along a given high-definition roadmap to the desired goal location. </p>"},{"location":"modules/adore/#documentation","title":"Documentation","text":"<p>In order to get started, it is advised to first check system requirements, follow the installation instruction and then try out the demo scenarios.</p> <ul> <li>Github Pages</li> <li>Quick Start</li> <li>Getting started</li> <li>Technical Reference Manual</li> </ul>"},{"location":"modules/adore/#adore-in-action","title":"ADORe In Action","text":"<p>Here you can see one of our automated test vehicles being operated by ADORe: </p>"},{"location":"modules/adore/#example-application","title":"Example application","text":"<p>The following video shows an automated vehicle controlled by ADORe in an urban setting in Braunschweig, Germany: </p>"},{"location":"modules/adore/ros2_workspace/src/example_nodes/","title":"example_nodes","text":"<p>The <code>example_nodes</code> directory contains an assortment of \"Hello, World!\"  programs/nodes that demonstrate basic features of ROS and ADORe.</p>"},{"location":"modules/adore/ros2_workspace/src/example_nodes/cpp_publisher_subscriber_template/","title":"C++ Publisher Subscriber Template","text":"<p>This project provides a minimal c++ publisher and subscriber example. This node can be used as a template to create another node.</p>"},{"location":"modules/adore/ros2_workspace/src/example_nodes/cpp_publisher_subscriber_template/#getting-started","title":"Getting Started","text":"<p>To build this node within the ADORe CLI run:</p> <pre><code>make build\n</code></pre> <p>To run this node within the ADORe CLI use:</p> <pre><code>make run\n</code></pre>"},{"location":"modules/adore/ros2_workspace/src/example_nodes/ros2_eigen_hello_world/","title":"ros2_eigen_hello_world","text":"<p>This is a minimal ROS2 hello world program that uses the Eigen3 library</p> <ol> <li>Build the package with:</li> </ol> <pre><code>bash build.sh\n</code></pre> <ol> <li>Run the node:</li> </ol> <pre><code>bash run.sh\n</code></pre> <p>You should get the following output:</p> <pre><code>[INFO] [1700066229.388250475] [ros2_eigen_hello_world]: ROS2 Eigen3 Hello, World!\n[INFO] [1700066229.388365706] [ros2_eigen_hello_world]: m_eigen matrix:\n  3  -1\n2.5 1.5\n</code></pre>"},{"location":"modules/adore/ros2_workspace/src/example_nodes/ros2_hello_world/","title":"ros2_hello_world","text":"<p>This is a minimal ROS2 Hello, World program incorporating a GNU Makefile and  unit tests with gunit.</p> <p>This node/program provides a GNU Makefile for building, testing, and running.</p> <ol> <li>Build the package with:</li> </ol> <pre><code>make build\n</code></pre> <ol> <li>Test the node:</li> </ol> <pre><code>make test\n</code></pre> <ol> <li>Run the node:</li> </ol> <pre><code>make run\n</code></pre>"},{"location":"modules/adore/ros2_workspace/src/ros2_syslog/","title":"ros2_syslog","text":"<p>The ros2_syslog node/program subscribes to  ROS2 messages of type <code>telemetry</code> and writes them to the syslog.</p> <p>The syslog is rate limited.  This is defined by a global variable  <code>MAX_MESSAGES_PER_SECOND</code></p> <p>Syslog messages are automatically forward by rsyslog as telemetry if configured by the host.</p> <ol> <li>Build the package with:</li> </ol> <pre><code>bash build.sh\n</code></pre> <ol> <li>Run the node:</li> </ol> <pre><code>bash run.sh\n</code></pre>"},{"location":"modules/adore/vendor/","title":"./vendor","text":"<p>The \"vendor\" directory of the ADORe project provides a normalized build interface to all external libraries and tools that are available for use within ADORe CLI. All \"vendor\" packages, libraries, or tools are provide as git submodules. When build is invoked all \"vendor\" components generate a Debian APT .deb package  in <code>./vendor/build</code>.</p>"},{"location":"modules/adore/vendor/#building","title":"Building","text":"<p>The <code>Makefile</code> provides a standard interface that invokes/triggers a build on all  \"vendor\" by invoking <code>make build</code>. The artifacts will be output to: <code>./vendor/build</code>.</p>"},{"location":"modules/adore/vendor/helix/","title":"Helix Editor Docker Installation","text":"<p>This docker file sets up and build the 25.01.1 version of the Helix Editor if the host system is x86_64.</p> <p>Link to the helix editor website:</p> <pre><code>https://github.com/helix-editor/helix\n</code></pre>"},{"location":"modules/adore/vendor/helix/#how-to-install","title":"How to install","text":"<p>To build the amd64 debian file of Helix use the make file</p> <pre><code>make build\n</code></pre> <p>This will output the debian file in build/helix folder.</p> <p>To cleanup afterwards, use</p> <pre><code>make clean\n</code></pre> <p>To manually install the build debian file, use the command.</p> <pre><code>sudo apt-get install ./&lt;debian_output_file_name&gt;\n</code></pre>"},{"location":"modules/adore_cli/","title":"ADORe CLI","text":"<p>The ADORe CLI project provides a ROS2 context and runtime context for ADORe.</p>"},{"location":"modules/adore_cli/#prerequisites","title":"Prerequisites","text":"<p>Docker and make must be installed to use this project</p>"},{"location":"modules/adore_cli/#getting-started","title":"Getting started","text":"<ol> <li>clone the repository</li> <li>run the provided make target to launch the cli</li> </ol> <pre><code>make cli\n</code></pre>"},{"location":"modules/adore_decision_maker/","title":"Decision Maker Node","text":""},{"location":"modules/adore_decision_maker/#overview","title":"Overview","text":"<p>The Decision Maker Node orchestrates the vehicle's behavior by determining the appropriate operational state based on real-time conditions and data inputs. It ensures safe, efficient, and responsive driving through a state-based decision-making framework, integrating route planning, trajectory generation, and safety corridor management.</p>"},{"location":"modules/adore_decision_maker/#features","title":"Features","text":"<ul> <li>State-Based Decision Making:</li> <li>Seven operational states, prioritized by criticality:<ol> <li>Safety Corridor: Navigate within a safety corridor.</li> <li>Remote Operation: Operate under remote control.</li> <li>Requesting Assistance: Handle assistance requests.</li> <li>Follow Route: Follow a predefined route.</li> <li>Follow Reference: Track a given trajectory.</li> <li>Standstill: Halt the vehicle.</li> <li>Emergency Stop: Stop immediately in critical situations.</li> </ol> </li> <li>Route Planning and Trajectory Generation:</li> <li>Supports multiple planners: Lane Following and OptiNLC.</li> <li>Dynamically generates trajectories based on current conditions.</li> <li>Safety Corridor Handling:</li> <li>Manages trajectories to navigate or escape safety corridors.</li> <li>Supports both JSON and DENM-based safety corridor formats.</li> <li>Remote Operation Support:</li> <li>Follows waypoints provided during remote operations.</li> <li>Dynamic Environment Awareness:</li> <li>Adapts to real-time updates from maps, routes, and vehicle states.</li> </ul>"},{"location":"modules/adore_decision_maker/#topics","title":"Topics","text":""},{"location":"modules/adore_decision_maker/#published-topics","title":"Published Topics","text":"<ol> <li><code>trajectory_decision</code></li> <li>Type: <code>adore_ros2_msgs::msg::Trajectory</code></li> <li> <p>Description: Publishes the generated trajectory for execution.</p> </li> <li> <p><code>/MAV/control/RO/path_suggestion</code></p> </li> <li>Type: <code>std_msgs::msg::String</code></li> <li> <p>Description: Suggests an alternative trajectory during remote operations.</p> </li> <li> <p><code>remote_operations_driving_status</code></p> </li> <li>Type: <code>adore_ros2_msgs::msg::RemoteOperationsDrivingStatus</code></li> <li> <p>Description: Publishes the status of remote driving operations.</p> </li> <li> <p><code>/MAV/state/modes</code></p> </li> <li>Type: <code>std_msgs::msg::String</code></li> <li> <p>Description: Notifies the system of the current driving mode.</p> </li> <li> <p><code>/MAV/state/position</code></p> </li> <li>Type: <code>std_msgs::msg::String</code></li> <li>Description: Publishes the vehicle's position during remote operations.</li> </ol>"},{"location":"modules/adore_decision_maker/#subscribed-topics","title":"Subscribed Topics","text":"<ol> <li><code>route</code></li> <li>Type: <code>adore_ros2_msgs::msg::Route</code></li> <li> <p>Description: Receives the current planned route.</p> </li> <li> <p><code>vehicle_state/dynamic</code></p> </li> <li>Type: <code>adore_ros2_msgs::msg::VehicleStateDynamic</code></li> <li> <p>Description: Updates the vehicle's dynamic state.</p> </li> <li> <p><code>local_map</code></p> </li> <li>Type: <code>adore_ros2_msgs::msg::Map</code></li> <li> <p>Description: Receives updates on the local map.</p> </li> <li> <p><code>/ego_vehicle/v2x/json/rgs</code></p> </li> <li>Type: <code>std_msgs::msg::String</code></li> <li> <p>Description: Receives safety corridor data in JSON format.</p> </li> <li> <p><code>/DENM_out</code></p> </li> <li>Type: <code>denm_v2_23_denm_pdu_description_msgs::msg::DENM</code></li> <li> <p>Description: Receives safety corridor data in DENM format.</p> </li> <li> <p><code>vehicle_state/monitor</code></p> </li> <li>Type: <code>adore_ros2_msgs::msg::StateMonitor</code></li> <li> <p>Description: Monitors the vehicle's localization and state.</p> </li> <li> <p><code>/MAV/control/waypoint_suggestion</code></p> </li> <li>Type: <code>std_msgs::msg::String</code></li> <li> <p>Description: Receives waypoint suggestions for remote operation.</p> </li> <li> <p><code>planned_trajectory</code></p> </li> <li>Type: <code>adore_ros2_msgs::msg::Trajectory</code></li> <li> <p>Description: Receives a pre-planned trajectory to follow.</p> </li> <li> <p><code>traffic_signals</code></p> </li> <li>Type: <code>adore_ros2_msgs::msg::TrafficSignals</code></li> <li>Description: Updates traffic signal information.</li> </ol>"},{"location":"modules/adore_decision_maker/#parameters","title":"Parameters","text":"Parameter Name Type Default Value Description <code>debug_mode_active</code> <code>bool</code> <code>true</code> Enables or disables debug logging. <code>use_reference_trajectory_as_is</code> <code>bool</code> <code>true</code> Uses the reference trajectory directly without optimization. <code>set_route_planner</code> <code>int</code> <code>0</code> Sets the route planner (0: Lane Following, 1: OptiNLC). <code>dt</code> <code>double</code> <code>0.05</code> Control loop time step (seconds). <code>remote_operation_speed</code> <code>double</code> <code>2.0</code> Speed during remote operation (m/s). <code>max_acceleration</code> <code>double</code> <code>2.0</code> Maximum allowed acceleration (m/s\u00b2). <code>min_acceleration</code> <code>double</code> <code>-2.0</code> Minimum allowed acceleration (m/s\u00b2). <code>max_steering</code> <code>double</code> <code>0.7</code> Maximum allowed steering angle (radians)."},{"location":"modules/adore_decision_maker/#states","title":"States","text":""},{"location":"modules/adore_decision_maker/#state-prioritization","title":"State Prioritization","text":"<p>States are evaluated in the following priority order: 1. Safety Corridor:    - Conditions: <code>VEHICLE_STATE_OK</code> and <code>SAFETY_CORRIDOR_PRESENT</code>.    - Generates a trajectory within or escaping the safety corridor. 2. Remote Operation:    - Conditions: <code>VEHICLE_STATE_OK</code> and <code>WAYPOINTS_AVAILABLE</code>.    - Follows waypoints during remote control. 3. Requesting Assistance:    - Conditions: <code>VEHICLE_STATE_OK</code> and <code>NEED_ASSISTANCE</code>.    - Generates a standstill trajectory and requests assistance. 4. Follow Route:    - Conditions: <code>VEHICLE_STATE_OK</code>, <code>ROUTE_AVAILABLE</code>, and <code>LOCAL_MAP_AVAILABLE</code>.    - Generates a trajectory to follow a planned route. 5. Follow Reference:    - Conditions: <code>VEHICLE_STATE_OK</code> and <code>REFERENCE_TRAJECTORY_VALID</code>.    - Tracks the provided trajectory. 6. Standstill:    - Conditions: <code>VEHICLE_STATE_OK</code>.    - Generates a standstill trajectory. 7. Emergency Stop:    - Conditions: None.    - Stops the vehicle immediately.</p>"},{"location":"modules/adore_libraries/","title":"Target generation","text":"<p>This project contains cmake helper functions to auto-generate library and executable targets</p>"},{"location":"modules/adore_libraries/#libraries","title":"Libraries","text":""},{"location":"modules/adore_libraries/#interface-library","title":"Interface Library","text":"<p>To create an interface library make a directory in <code>lib/&lt;library name&gt;/include</code> with the desired library name. The library directory must contain an <code>include</code>  directory to generate an interface library.</p>"},{"location":"modules/adore_libraries/#static-library","title":"Static Library","text":"<p>Library targets will be auto-generated based off of directory structure. Any subdirectory in <code>lib</code> is assumed to be a library if there is a <code>include</code> and <code>src</code> directory that is not matched in the <code>.cmakeignore</code> file.</p>"},{"location":"modules/adore_libraries/#example-library","title":"Example library:","text":"<p>The following directory structure will result in target: <code>a</code> being defined as a static library.</p> <pre><code>lib/a\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 a.h\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500\u2500\u2500 a.cpp\n</code></pre> <ul> <li>All include directories for all defined targets will be included into target <code>a</code>.</li> <li>All link libraries for all defined targets will be linked into target <code>a</code>.</li> </ul>"},{"location":"modules/adore_libraries/#output","title":"Output:","text":"<p>Once target a is defined and <code>make build</code> is invoked the resulting output will be generated for target: <code>a</code></p> <pre><code>build/lib\n\u251c\u2500\u2500 a\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 include\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 a.h\n\u2514\u2500\u2500 liba.a\n\n</code></pre> <ul> <li> <p>A <code>build/lib</code> directory will be generated with all artifacts for every library target.</p> </li> <li> <p>A <code>build/share</code> directory will be generated so that cmake <code>find_package(&lt;package name&gt;)</code> can be invoked on the package.</p> </li> </ul> <pre><code>build/share\n\u2514\u2500\u2500 \u2500\u2500 a\n \u00a0\u00a0 \u2514\u2500\u2500 cmake\n \u00a0\u00a0     \u251c\u2500\u2500 aConfig.cmake\n \u00a0\u00a0     \u2514\u2500\u2500 aTargets.cmake\n</code></pre> <p>Note: the <code>build/share</code> directory needs to be appended to the <code>CMAKE_PREFIX_PATH</code> in order for cmake <code>find_package</code> to  work</p>"},{"location":"modules/adore_libraries/#external-packages","title":"External packages","text":"<p>External cmake packages can be used. They should be included via a <code>requirements.cmake</code> file in the library directory.</p> <p>All <code>requirements.cmake</code> files are recursively added during target generation.</p> <p>The example library <code>boost_hello</code> requires boost. Inside <code>lib/boost_hello/requirements.cmake</code> <code>find_package(Boost REQUIRED)</code> is invoked.</p> <p>The <code>requirements.system</code> captures any necessary Debian package management system (APT) requirements that are needed for the library. In this example it is <code>libboost1.74-all-dev</code></p>"},{"location":"modules/adore_libraries/#example-boost_hello-static-library","title":"Example <code>boost_hello</code> static library","text":"<pre><code>lib/boost_hello\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 boost_hello.h\n\u251c\u2500\u2500 requirements.cmake\n\u251c\u2500\u2500 requirements.system\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 boost_hello.cpp\n</code></pre> <p>A static shared library called <code>boost_hello</code> will be generated that is dependent on the external package <code>Boost</code> with the following output:</p> <pre><code>build/lib\n\u251c\u2500\u2500 boost_hello\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 include\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 boost_hello.h\n\u2514\u2500\u2500 libboost_hello.a\n</code></pre> <p>CMake share directory:</p> <pre><code>build/share\n\u2514\u2500\u2500 boost_hello\n    \u2514\u2500\u2500 cmake\n        \u251c\u2500\u2500 boost_helloConfig.cmake\n        \u2514\u2500\u2500 boost_helloTargets.cmake\n</code></pre>"},{"location":"modules/adore_libraries/#executable-targets","title":"Executable targets","text":"<p>Any <code>.cpp</code> file anywhere in <code>lib</code> directory tree that is not matched in the  <code>.cmakeignore</code> and contains a <code>main</code> method/function will auto-generate an  executable target.</p> <ul> <li>All include directories for all defined targets will be included into the executable target.</li> <li>All link libraries for all defined targets will be linked into the executable target.</li> </ul>"},{"location":"modules/adore_libraries/#boost_hello_test_program-example","title":"boost_hello_test_program example","text":"<p>Gives the following structure an executable target called <code>boost_hello_test_program</code> which contains a <code>main</code> method will be generated:</p> <pre><code>lib/boost_hello\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 boost_hello.h\n\u251c\u2500\u2500 requirements.cmake\n\u251c\u2500\u2500 requirements.system\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 boost_hello.cpp\n    \u2514\u2500\u2500 boost_hello_test_program.cpp\n</code></pre> <p>The executable target, in this case <code>boost_hello_test_program</code> can be anywhere in the directory tree for <code>lib</code>.</p> <ul> <li>All target include directories, such as for the library <code>boost_hello</code>, will be added to the target <code>boost_hello_test_program</code></li> <li>All target link directories, such as for the library <code>boost_hello</code>, will be added to the target <code>boost_hello_test_program</code></li> </ul> <p>Once invoking <code>make build</code> an executable will be available in the <code>build/bin</code> directory with the same name as the executable target itself e.g, <code>boost_hello_test_program</code>. </p>"},{"location":"modules/adore_libraries/#cmakeignore-file","title":"<code>.cmakeignore</code> file","text":"<p>The <code>.cmakeignore</code> file provides a means to disable a target similar to the .gitignore file. Any pattern matching a directory in <code>lib</code> that is in the <code>.cmakeignore</code> will not auto-generate a target and will also not build. Review the comments in <code>.cmakeignore</code> for more information.</p>"},{"location":"modules/adore_libraries/lib/adore_controllers/","title":"ADORe Controller Library","text":""},{"location":"modules/adore_libraries/lib/adore_controllers/#overview","title":"Overview","text":"<p>This library provides various controllers for trajectory tracking, designed for autonomous vehicle applications. The controllers can be used to compute control commands (acceleration, steering angle) based on the vehicle's state and a desired trajectory. The following controllers are included:</p> <ul> <li>NMPC (Nonlinear Model Predictive Control)</li> <li>PID (Proportional-Integral-Derivative Control)</li> <li>iLQR (Iterative Linear Quadratic Regulator)</li> </ul> <p>These controllers are designed to be easily integrated into any vehicle trajectory tracking application and can be configured with custom vehicle limits and controller-specific parameters.</p>"},{"location":"modules/adore_libraries/lib/adore_controllers/#features","title":"Features","text":"<ul> <li>Modular Design: Each controller can be used independently or in conjunction with others.</li> <li>Configurable Limits: Vehicle command limits (e.g., acceleration, steering angle) can be easily set.</li> <li>Multiple Controllers: Includes four types of controllers for different use cases and performance needs.</li> </ul>"},{"location":"modules/adore_libraries/lib/adore_controllers/#controllers","title":"Controllers","text":""},{"location":"modules/adore_libraries/lib/adore_controllers/#nmpc-nonlinear-model-predictive-control","title":"NMPC (Nonlinear Model Predictive Control)","text":"<p>A sophisticated control method that optimizes a vehicle's trajectory over a prediction horizon. It accounts for constraints like limits on acceleration and steering.</p>"},{"location":"modules/adore_libraries/lib/adore_controllers/#pid-proportional-integral-derivative-control","title":"PID (Proportional-Integral-Derivative Control)","text":"<p>A simpler control method that adjusts the vehicle's steering and speed based on the difference between the desired trajectory and the actual vehicle state.</p>"},{"location":"modules/adore_libraries/lib/adore_controllers/#ilqr-iterative-linear-quadratic-regulator","title":"iLQR (Iterative Linear Quadratic Regulator)","text":"<p>An advanced controller that computes an optimal control sequence based on a linear-quadratic approximation of the system's dynamics and cost function.</p>"},{"location":"modules/adore_libraries/lib/adore_dynamics/","title":"Vehicle Dynamics Library","text":""},{"location":"modules/adore_libraries/lib/adore_dynamics/#overview","title":"Overview","text":"<p>This library provides tools for simulating vehicle dynamics, integrating physical models, and managing vehicle states and commands. The components are modular and designed to support the simulation of autonomous vehicles, including trajectory planning and control-</p>"},{"location":"modules/adore_libraries/lib/adore_dynamics/#features","title":"Features","text":"<ul> <li>Integration Methods:</li> <li>Efficient Runge-Kutta 4th order (RK4) integration for dynamic systems.</li> <li>Physical Vehicle Models:</li> <li>Predefined parameters for common vehicle models (e.g., bicycle model).</li> <li>Trajectory Handling:</li> <li>Support for trajectory generation and interpolation.</li> <li>Vehicle State Management:</li> <li>Classes for managing vehicle states and transitions.</li> <li>Vehicle Command Abstractions:</li> <li>Structures to encapsulate commands such as steering, acceleration.</li> </ul>"},{"location":"modules/adore_libraries/lib/adore_dynamics/#included-modules","title":"Included Modules","text":""},{"location":"modules/adore_libraries/lib/adore_dynamics/#integration","title":"Integration","text":"<p>File: <code>integration.hpp</code> - Provides tools for numerical integration - Core functionality for advancing dynamic systems in time.</p>"},{"location":"modules/adore_libraries/lib/adore_dynamics/#rk4-solver","title":"RK4 Solver","text":"<p>File: <code>OdeRK4.hpp</code> - Implements the 4th-order Runge-Kutta solver.</p>"},{"location":"modules/adore_libraries/lib/adore_dynamics/#physical-vehicle-parameters","title":"Physical Vehicle Parameters","text":"<p>File: <code>physical_vehicle_parameters.hpp</code> - Contains parameter definitions for vehicle models. - Includes attributes such as wheelbase, mass, and maximum steering angles.</p>"},{"location":"modules/adore_libraries/lib/adore_dynamics/#trajectory-handling","title":"Trajectory Handling","text":"<p>File: <code>trajectory.hpp</code> - Provides trajectory representations and interpolation methods.</p>"},{"location":"modules/adore_libraries/lib/adore_dynamics/#vehicle-command","title":"Vehicle Command","text":"<p>File: <code>vehicle_command.hpp</code> - Encapsulates vehicle control commands - steering angles and acceleration.</p>"},{"location":"modules/adore_libraries/lib/adore_dynamics/#vehicle-state","title":"Vehicle State","text":"<p>File: <code>vehicle_state.hpp</code> - Manages the state of a simulated vehicle, including position, velocity, and orientation. - Provides methods for state updates and transformations.</p>"},{"location":"modules/adore_libraries/lib/adore_map/","title":"Map Library for Autonomous Vehicles","text":""},{"location":"modules/adore_libraries/lib/adore_map/#overview","title":"Overview","text":"<p>The Map Library provides  tools for handling map data in autonomous vehicle simulations. It includes modules for lane and route management, spatial querying using quadtree structures, geographic coordinate conversions. The library is designed for efficiency and integration with autonomous vehicle systems.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#features","title":"Features","text":"<ul> <li>Lane and Route Management:</li> <li>Define and manage lanes, routes, and road networks.</li> <li>Map Point and Spatial Data:</li> <li>Support for geospatial data handling and storage.</li> <li>Quadtree Spatial Indexing:</li> <li>Efficient spatial querying.</li> <li>Map Parsing and Loading:</li> <li>Tools for loading and parsing maps, including Road2Simulation (R2S) format support.</li> <li>Geographic Conversions:</li> <li>Latitude/longitude to UTM coordinate transformations.</li> </ul>"},{"location":"modules/adore_libraries/lib/adore_map/#included-modules","title":"Included Modules","text":""},{"location":"modules/adore_libraries/lib/adore_map/#lane-representation","title":"Lane Representation","text":"<p>File: <code>lane.hpp</code> - Defines lane structures, attributes, and connectivity. - Provides methods for querying lane information and relationships.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#geographic-conversions","title":"Geographic Conversions","text":"<p>File: <code>lat_long_conversions.hpp</code> - Implements conversions between latitude/longitude and UTM coordinates.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#map-structure","title":"Map Structure","text":"<p>File: <code>map.hpp</code> - Core representation of the map, including roads, lanes and road graph. - Supports high-level map querying and manipulation.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#map-loader","title":"Map Loader","text":"<p>File: <code>map_loader.hpp</code> - Handles the loading of map data from external files or formats. - Includes support for parsing the Road2Simulation (R2S) format.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#map-point","title":"Map Point","text":"<p>File: <code>map_point.hpp</code> - Represents individual points in the map.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#quadtree-spatial-index","title":"Quadtree Spatial Index","text":"<p>File: <code>quadtree.hpp</code> - Provides efficient spatial indexing for querying.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#r2s-parser","title":"R2S Parser","text":"<p>File: <code>r2s_parser.h</code> - Parses Road2Simulation (R2S) format maps into internal representations.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#rasterizer","title":"Rasterizer","text":"<p>File: <code>rasterizer.hpp</code> - Converts map representations into raster images for visualization or analysis. - Supports configurable resolution and layers.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#road-graph","title":"Road Graph","text":"<p>File: <code>road_graph.hpp</code> - Represents the map as a graph of lanes. - Supports pathfinding.</p>"},{"location":"modules/adore_libraries/lib/adore_map/#route-handling","title":"Route Handling","text":"<p>File: <code>route.hpp</code> - Defines and manages routes within the map. - Includes tools for route planning.</p>"},{"location":"modules/adore_libraries/lib/adore_math/","title":"Math Library for Autonomous Systems","text":""},{"location":"modules/adore_libraries/lib/adore_math/#overview","title":"Overview","text":"<p>The Math Library provides mathematical tools and utilities essential for ADORe. </p>"},{"location":"modules/adore_libraries/lib/adore_math/#features","title":"Features","text":"<ul> <li>Angle Utilities:</li> <li>Functions for angular operations like wrapping and delta computation.</li> <li>Curvature Analysis:</li> <li>Compute curvature for trajectories or continuous paths.</li> <li>Distance Calculations:</li> <li>templated distance metrics</li> <li>Piecewise Polynomials:</li> <li>Evaluate and manage piecewise polynomials.</li> <li>Spline Interpolation:</li> <li>Generate and evaluate cubic splines.</li> <li>Eigen Integration:</li> <li>Utilities for matrix and vector operations using the Eigen library.</li> </ul>"},{"location":"modules/adore_libraries/lib/adore_math/#included-modules","title":"Included Modules","text":""},{"location":"modules/adore_libraries/lib/adore_math/#angles","title":"Angles","text":"<p>File: <code>angles.h</code> - Provides utilities for angle normalization and conversion. - Handles wrapping of angles to predefined ranges.</p>"},{"location":"modules/adore_libraries/lib/adore_math/#curvature","title":"Curvature","text":"<p>File: <code>curvature.hpp</code> - Computes curvature for a given trajectory. - Useful for trajectory evaluation and planning.</p>"},{"location":"modules/adore_libraries/lib/adore_math/#distance","title":"Distance","text":"<p>File: <code>distance.h</code> - Implements various distance metrics, including:</p>"},{"location":"modules/adore_libraries/lib/adore_math/#eigen-utilities","title":"Eigen Utilities","text":"<p>File: <code>eigen.h</code> - Utilities for working with Eigen matrices and vectors.</p>"},{"location":"modules/adore_libraries/lib/adore_math/#piecewise-polynomial","title":"Piecewise Polynomial","text":"<p>File: <code>PiecewisePolynomial.h</code> - Represents and evaluates piecewise polynomial functions.</p>"},{"location":"modules/adore_libraries/lib/adore_math/#point-utilities","title":"Point Utilities","text":"<p>File: <code>point.h</code> - Structures and utilities for geometric point.</p>"},{"location":"modules/adore_libraries/lib/adore_math/#spline-interpolation","title":"Spline Interpolation","text":"<p>File: <code>spline.h</code> - Provides cubic spline interpolation for generating smooth paths. - Features include:   - Natural and clamped boundary conditions.   - Monotonicity adjustments for realistic curves.</p>"},{"location":"modules/adore_libraries/lib/adore_planning/","title":"Planning Library for Autonomous Vehicles","text":""},{"location":"modules/adore_libraries/lib/adore_planning/#overview","title":"Overview","text":"<p>The Planning Library provides advanced tools for trajectory planning and optimization in autonomous vehicles. It includes components for lane following, safety corridor planning, trust region optimization, and utilities to convert high-level routes into executable trajectories. Designed for efficiency, the library integrates optimization techniques and vehicle dynamics models.</p>"},{"location":"modules/adore_libraries/lib/adore_planning/#features","title":"Features","text":"<ul> <li>Lane Following:</li> <li>Implements trajectory planning to maintain a target route.</li> <li>Safety Corridor Planning:</li> <li>Plans trajectories within predefined safety corridors.</li> <li>Trajectory Optimization:</li> <li>Leverages Model Predictive Control (MPC) with Nonlinear Programming for optimal trajectory generation.</li> <li>Trust Region Optimization:</li> <li>Solves cooperative multi-agent planning problems using trust region solvers.</li> <li>Planning Helpers:</li> <li>Utilities for waypoint filtering, point shifting, and trajectory conversion.</li> </ul>"},{"location":"modules/adore_libraries/lib/adore_planning/#included-modules","title":"Included Modules","text":""},{"location":"modules/adore_libraries/lib/adore_planning/#lane-follow-planner","title":"Lane Follow Planner","text":"<p>File: <code>lane_follow_planner.hpp</code> - Implements lane-following behavior by generating trajectories that align with the centerline of a given route. - Considers vehicle dynamics, curvature, and control limits.</p>"},{"location":"modules/adore_libraries/lib/adore_planning/#optinlc-trajectory-optimizer","title":"OptiNLC Trajectory Optimizer","text":"<p>File: <code>optinlc_trajectory_optimizer.hpp</code> - Performs trajectory optimization using Model Predictive Control (MPC). - Optimizes trajectories by solving nonlinear constrained optimization problems. - Features customizable weights for objectives like lateral error, heading error, and steering input.</p>"},{"location":"modules/adore_libraries/lib/adore_planning/#optinlc-trajectory-planner","title":"OptiNLC Trajectory Planner","text":"<p>File: <code>optinlc_trajectory_planner.hpp</code> - Converts high-level routes into optimized trajectories using MPC. - Supports curvature-based velocity profiling and piecewise polynomial representations of routes.</p>"},{"location":"modules/adore_libraries/lib/adore_planning/#planning-helpers","title":"Planning Helpers","text":"<p>File: <code>planning_helpers.hpp</code> - Provides utility functions for planning, such as:   - Filtering waypoints in front of the vehicle.   - Shifting points laterally for safety or desired offsets.   - Converting waypoints into executable trajectories.</p>"},{"location":"modules/adore_libraries/lib/adore_planning/#safety-corridor-planner","title":"Safety Corridor Planner","text":"<p>File: <code>safety_corridor_planner.hpp</code> - Plans trajectories within a defined safety corridor. - Uses polynomial representations for corridor boundaries. - Implements constraints to ensure the vehicle remains within safe zones.</p>"},{"location":"modules/adore_libraries/lib/adore_planning/#trust-region-solver","title":"Trust Region Solver","text":"<p>File: <code>trust_region_solver.hpp</code> - Solves multi-agent planning problems using trust region optimization. - Models each agent's trajectory and controls, ensuring convergence through gradient-based optimization.</p>"},{"location":"modules/adore_mission_control/","title":"Mission Control Node","text":""},{"location":"modules/adore_mission_control/#overview","title":"Overview","text":"<p>The Mission Control Node is responsible for managing vehicle missions, generating and updating routes, publishing goals, and visualizing lane center distances in real time. It integrates map data, dynamically updates routes based on vehicle state, and supports interactive goal-setting via ROS topics.</p>"},{"location":"modules/adore_mission_control/#features","title":"Features","text":"<ul> <li>Route Management:</li> <li>Dynamically updates routes based on vehicle position and progress.</li> <li>Handles off-route scenarios and regenerates routes to active goals.</li> <li>Goal Management:</li> <li>Publishes goal points for other nodes in the system.</li> <li>Supports interactive goal-setting via <code>/clicked_point/goal_position</code>.</li> <li>Local Map Publishing:</li> <li>Publishes a cropped submap around the vehicle for local planning and visualization.</li> </ul>"},{"location":"modules/adore_mission_control/#topics","title":"Topics","text":""},{"location":"modules/adore_mission_control/#published-topics","title":"Published Topics","text":"<ol> <li><code>mission/goal_position</code></li> <li>Type: <code>adore_ros2_msgs::msg::GoalPoint</code></li> <li> <p>Description: Publishes the current goal position.</p> </li> <li> <p><code>route</code></p> </li> <li>Type: <code>adore_ros2_msgs::msg::Route</code></li> <li> <p>Description: Publishes the current route to the active goal.</p> </li> <li> <p><code>local_map</code></p> </li> <li>Type: <code>adore_ros2_msgs::msg::Map</code></li> <li> <p>Description: Publishes a cropped local map around the vehicle.</p> </li> <li> <p><code>goal_reached</code></p> </li> <li>Type: <code>std_msgs::msg::Bool</code></li> <li>Description: Publishes <code>true</code> when the current goal is reached.</li> </ol>"},{"location":"modules/adore_mission_control/#parameters","title":"Parameters","text":"Parameter Name Type Default Value Description <code>goal_position_x</code> <code>double</code> <code>0.0</code> X-coordinate of the initial goal. <code>goal_position_y</code> <code>double</code> <code>0.0</code> Y-coordinate of the initial goal. <code>R2S map file</code> <code>string</code> <code>\"\"</code> Path to the R2S map file."},{"location":"modules/adore_ros2_msgs/","title":"ADORe ROS2 Messages","text":""},{"location":"modules/adore_ros2_msgs/#overview","title":"Overview","text":"<p>Repository for common ADORe messages</p>"},{"location":"modules/adore_ros2_msgs/#message-overview","title":"Message overview","text":"<p>MapConnection.msg MapPoint.msg MapLane.msg MapRoad.msg GoalPoint.msg Map.msg Route.msg TrafficSignal.msg TrafficSignals.msg VehicleStateDynamic.msg SafetyCorridor.msg IndicatorState.msg Trajectory.msg VehicleCommand.msg GearState.msg VehicleInfo.msg</p>"},{"location":"modules/adore_simulated_vehicle/","title":"Simulated Vehicle Node","text":""},{"location":"modules/adore_simulated_vehicle/#overview","title":"Overview","text":"<p>The Simulated Vehicle Node is part of the Eclipse ADORe project. It simulates a vehicle's dynamics and publishes its state while integrating with other simulated traffic participants. This node provides control interfaces, state publishers, and supports noise injection for simulation fidelity.</p>"},{"location":"modules/adore_simulated_vehicle/#features","title":"Features","text":"<ul> <li>Vehicle Dynamics Simulation: Simulates a vehicle using a physical model (e.g., bicycle model).</li> <li>Noise Injection: Adds configurable noise to position, velocity, yaw, and acceleration for realistic simulation.</li> <li>State Publishing:</li> <li>Vehicle dynamic state</li> <li>Odometry for localization</li> <li>Traffic participant data</li> <li>Multi-Vehicle Simulation: Subscribes to the states of other vehicles in the simulation to provide context-aware traffic interactions.</li> <li>Control Interfaces:</li> <li>Supports both manual control via teleoperation.</li> <li>Automated vehicle control.</li> </ul>"},{"location":"modules/adore_simulated_vehicle/#topics","title":"Topics","text":""},{"location":"modules/adore_simulated_vehicle/#published-topics","title":"Published Topics","text":"<ol> <li><code>vehicle_state/dynamic</code></li> <li>Message Type: <code>adore_ros2_msgs::msg::VehicleStateDynamic</code></li> <li> <p>Description: Publishes the current dynamic state of the simulated vehicle.</p> </li> <li> <p><code>vehicle_state/localization</code></p> </li> <li>Message Type: <code>nav_msgs::msg::Odometry</code></li> <li> <p>Description: Provides odometry data for localization purposes.</p> </li> <li> <p><code>vehicle_state/monitor</code></p> </li> <li>Message Type: <code>adore_ros2_msgs::msg::StateMonitor</code></li> <li> <p>Description: Publishes localization error metrics.</p> </li> <li> <p><code>traffic_participants</code></p> </li> <li>Message Type: <code>adore_ros2_msgs::msg::TrafficParticipantSet</code></li> <li>Description: Publishes the state of surrounding simulated traffic participants.</li> </ol>"},{"location":"modules/adore_simulated_vehicle/#subscribed-topics","title":"Subscribed Topics","text":"<ol> <li><code>next_vehicle_command</code></li> <li>Message Type: <code>adore_ros2_msgs::msg::VehicleCommand</code></li> <li> <p>Description: Receives commands for steering and acceleration.</p> </li> <li> <p><code>teleop_controller</code></p> </li> <li>Message Type: <code>geometry_msgs::msg::Twist</code></li> <li> <p>Description: Accepts manual control inputs for teleoperation.</p> </li> <li> <p><code>automation_toggle</code></p> </li> <li>Message Type: <code>std_msgs::msg::Bool</code></li> <li> <p>Description: Toggles between manual and automated control.</p> </li> <li> <p><code>/&lt;namespace&gt;/vehicle_state/localization</code></p> </li> <li>Message Type: <code>nav_msgs::msg::Odometry</code></li> <li>Description: Subscribes to localization data from other vehicles.</li> </ol>"},{"location":"modules/adore_simulated_vehicle/#parameters","title":"Parameters","text":"Parameter Name Type Default Value Description <code>controllable</code> <code>bool</code> <code>true</code> Determines if the vehicle is controllable. <code>set_start_position_x</code> <code>double</code> <code>0.0</code> Initial x-coordinate of the vehicle. <code>set_start_position_y</code> <code>0.0</code> <code>double</code> Initial y-coordinate of the vehicle. <code>set_start_psi</code> <code>0.0</code> <code>double</code> Initial yaw angle of the vehicle. <code>position_noise_stddev</code> <code>double</code> <code>0.0</code> Standard deviation for position noise. <code>velocity_noise_stddev</code> <code>double</code> <code>0.0</code> Standard deviation for velocity noise. <code>yaw_noise_stddev</code> <code>double</code> <code>0.0</code> Standard deviation for yaw noise. <code>acceleration_noise_stddev</code> <code>double</code> <code>0.0</code> Standard deviation for acceleration noise. <code>other_vehicle_namespaces</code> <code>list&lt;string&gt;</code> <code>[]</code> List of other vehicle namespaces."},{"location":"modules/adore_simulated_vehicle/#how-it-works","title":"How It Works","text":"<ol> <li>Initialization:</li> <li>Loads configuration parameters.</li> <li>Sets up publishers, subscribers, and noise distributions.</li> <li>Simulation:</li> <li>Simulates vehicle dynamics using a physical model.</li> <li>Injects configurable noise into the vehicle state.</li> <li>Publishing and Subscribing:</li> <li>Publishes its dynamic state and subscribes to other vehicles' states.</li> <li>Broadcasts the simulated vehicle's transform for integration with ROS 2 TF.</li> <li>Traffic Participant Updates:</li> <li>Computes distances to other vehicles and publishes a list of relevant traffic participants.</li> </ol>"},{"location":"modules/adore_trajectory_tracker/","title":"Trajectory Tracker Node","text":""},{"location":"modules/adore_trajectory_tracker/#overview","title":"Overview","text":"<p>The Trajectory Tracker Node is a ROS 2 node designed to track and execute vehicle trajectories. It supports multiple controllers that calculate the optimal control commands (acceleration and steering) based on the current vehicle state and a desired trajectory.</p>"},{"location":"modules/adore_trajectory_tracker/#features","title":"Features","text":"<ul> <li>Multiple Controllers Supported: The node supports different controllers for trajectory tracking, including:</li> <li>NMPC (Nonlinear Model Predictive Controller)</li> <li>PID (Proportional-Integral-Derivative Controller)</li> <li>iLQR (Iterative Linear Quadratic Regulator)</li> <li>Real-time Control: The node operates in real-time, constantly computing and publishing vehicle commands.</li> <li>Configurable via ROS 2 Parameters: You can dynamically choose which controller to use and configure controller parameters via ROS 2 launch files or parameter servers.</li> </ul>"},{"location":"modules/adore_trajectory_tracker/#controllers","title":"Controllers","text":"<ul> <li>NMPC: Optimizes the trajectory over a prediction horizon while respecting control and vehicle limits.</li> <li>PID: Adjusts steering and speed based on the error between the current state and the desired trajectory.</li> <li>iLQR: Computes the optimal control commands using iterative linear quadratic methods.</li> </ul>"},{"location":"modules/adore_trajectory_tracker/#ros-2-parameters","title":"ROS 2 Parameters","text":"<ul> <li><code>set_controller</code> (int): Defines which controller to use. Options:</li> <li><code>0</code>: NMPC (default)</li> <li><code>1</code>: PID</li> <li><code>3</code>: iLQR</li> <li><code>controller_settings</code>: A dictionary of controller-specific parameters. Each controller can be configured with different settings (e.g., PID gains, NMPC weights). These are given in two vectors: keys (string) and values (double)</li> <li><code>vehicle_type</code> (string): Specifies the type of vehicle being controlled, e.g., \"simulation\" or a real-world vehicle type.</li> </ul>"},{"location":"modules/adore_trajectory_tracker/#topics","title":"Topics","text":"<ul> <li>Published Topics:</li> <li> <p><code>/next_vehicle_command</code> (<code>adore_ros2_msgs::msg::VehicleCommand</code>): The next control command (acceleration, steering) for the vehicle.</p> </li> <li> <p>Subscribed Topics:</p> </li> <li><code>/planned_trajectory</code> (<code>adore_ros2_msgs::msg::Trajectory</code>): The desired trajectory the vehicle should follow.</li> <li><code>/vehicle_state/dynamic</code> (<code>adore_ros2_msgs::msg::VehicleStateDynamic</code>): The current dynamic state of the vehicle (e.g., position, velocity, yaw).</li> <li><code>/choosen_decision_maker</code> (<code>adore_ros2_msgs::msg::DecisionMakerSelect</code>): The decision-maker selecting the mode (normal or emergency).</li> </ul>"},{"location":"modules/adore_visualizer/","title":"Visualization Node for Autonomous Systems","text":""},{"location":"modules/adore_visualizer/#overview","title":"Overview","text":"<p>The Visualization Node provides tools for visualizing autonomous vehicle states, trajectories, and maps. It integrates with ROS 2 and generates markers for visualization in RViz/Foxbox, enabling users to view and debug various aspects of autonomous driving systems.</p>"},{"location":"modules/adore_visualizer/#included-modules","title":"Included Modules","text":""},{"location":"modules/adore_visualizer/#characters","title":"Characters","text":"<p>File: <code>characters.hpp</code> - Contains a map of ASCII characters to 5x7 pixel representations. - Used for rendering text on visualizations.</p>"},{"location":"modules/adore_visualizer/#color-palette","title":"Color Palette","text":"<p>File: <code>color_palette.hpp</code> - Defines a set of predefined colors based on the Tableau 10 palette. - Includes utilities for HSV-to-RGB color conversion.</p>"},{"location":"modules/adore_visualizer/#map-image-visualization","title":"Map Image Visualization","text":"<p>File: <code>map_image_visualization.hpp</code> - Provides tools to convert map tiles into occupancy grids. - Fetches map images and integrates them into visualization workflows.</p>"},{"location":"modules/adore_visualizer/#state-buffer","title":"State Buffer","text":"<p>File: <code>state_buffer.hpp</code> - Implements a time-based circular buffer for vehicle state data. - Useful for creating time-history visualizations.</p>"},{"location":"modules/adore_visualizer/#visualization-primitives","title":"Visualization Primitives","text":"<p>File: <code>visualization_primitives.hpp</code> - Provides utilities for creating basic visualization markers:   - Rectangles, spheres, and lines.   - Finish lines and text markers. - Supports flexible offsets and scaling.</p>"},{"location":"modules/adore_visualizer/#visualizer","title":"Visualizer","text":"<p>File: <code>visualizer.hpp</code> - Implements the main node for visualization. - Subscribes to various ROS 2 topics and publishes visualization markers for RViz.</p>"},{"location":"modules/adore_visualizer/#visualizer-conversions","title":"Visualizer Conversions","text":"<p>File: <code>visualizer_conversions.hpp</code> - Converts ROS 2 messages (e.g., trajectories, maps, goals) into marker arrays. - Includes support for traffic participant sets, safety corridors, and more.</p>"},{"location":"modules/ci_teststand/","title":"ci_teststand","text":"<p>The CI Teststand project provides boilerplate scripts for execution of  automated tests for ADORe.</p>"},{"location":"modules/json/","title":"Index","text":"<ul> <li>Design goals</li> <li>Sponsors</li> <li>Support (documentation, FAQ, discussions, API, bug issues)</li> <li>Examples</li> <li>Read JSON from a file</li> <li>Creating <code>json</code> objects from JSON literals</li> <li>JSON as first-class data type</li> <li>Serialization / Deserialization</li> <li>STL-like access</li> <li>Conversion from STL containers</li> <li>JSON Pointer and JSON Patch</li> <li>JSON Merge Patch</li> <li>Implicit conversions</li> <li>Conversions to/from arbitrary types</li> <li>Specializing enum conversion</li> <li>Binary formats (BSON, CBOR, MessagePack, UBJSON, and BJData)</li> <li>Supported compilers</li> <li>Integration</li> <li>CMake</li> <li>Package Managers</li> <li>Pkg-config</li> <li>License</li> <li>Contact</li> <li>Thanks</li> <li>Used third-party tools</li> <li>Projects using JSON for Modern C++</li> <li>Notes</li> <li>Execute unit tests</li> </ul>"},{"location":"modules/json/#design-goals","title":"Design goals","text":"<p>There are myriads of JSON libraries out there, and each may even have its reason to exist. Our class had these design goals:</p> <ul> <li> <p>Intuitive syntax. In languages such as Python, JSON feels like a first class data type. We used all the operator magic of modern C++ to achieve the same feeling in your code. Check out the examples below and you'll know what I mean.</p> </li> <li> <p>Trivial integration. Our whole code consists of a single header file <code>json.hpp</code>. That's it. No library, no subproject, no dependencies, no complex build system. The class is written in vanilla C++11. All in all, everything should require no adjustment of your compiler flags or project settings.</p> </li> <li> <p>Serious testing. Our code is heavily unit-tested and covers 100% of the code, including all exceptional behavior. Furthermore, we checked with Valgrind and the Clang Sanitizers that there are no memory leaks. Google OSS-Fuzz additionally runs fuzz tests against all parsers 24/7, effectively executing billions of tests so far. To maintain high quality, the project is following the Core Infrastructure Initiative (CII) best practices.</p> </li> </ul> <p>Other aspects were not so important to us:</p> <ul> <li> <p>Memory efficiency. Each JSON object has an overhead of one pointer (the maximal size of a union) and one enumeration element (1 byte). The default generalization uses the following C++ data types: <code>std::string</code> for strings, <code>int64_t</code>, <code>uint64_t</code> or <code>double</code> for numbers, <code>std::map</code> for objects, <code>std::vector</code> for arrays, and <code>bool</code> for Booleans. However, you can template the generalized class <code>basic_json</code> to your needs.</p> </li> <li> <p>Speed. There are certainly faster JSON libraries out there. However, if your goal is to speed up your development by adding JSON support with a single header, then this library is the way to go. If you know how to use a <code>std::vector</code> or <code>std::map</code>, you are already set.</p> </li> </ul> <p>See the contribution guidelines for more information.</p>"},{"location":"modules/json/#sponsors","title":"Sponsors","text":"<p>You can sponsor this library at GitHub Sponsors.</p>"},{"location":"modules/json/#office-corporate-sponsor","title":":office: Corporate Sponsor","text":""},{"location":"modules/json/#label-named-sponsors","title":":label: Named Sponsors","text":"<ul> <li>Michael Hartmann</li> <li>Stefan Hagen</li> <li>Steve Sperandeo</li> <li>Robert Jefe Lindst\u00e4dt</li> <li>Steve Wagner</li> <li>Lion Yang</li> </ul> <p>Thanks everyone!</p>"},{"location":"modules/json/#support","title":"Support","text":"<p>:question: If you have a question, please check if it is already answered in the FAQ or the Q&amp;A section. If not, please ask a new question there.</p> <p>:books: If you want to learn more about how to use the library, check out the rest of the README, have a look at code examples, or browse through the help pages.</p> <p>:construction: If you want to understand the API better, check out the API Reference.</p> <p>:bug: If you found a bug, please check the FAQ if it is a known issue or the result of a design decision. Please also have a look at the issue list before you create a new issue. Please provide as much information as possible to help us understand and reproduce your issue.</p> <p>There is also a docset for the documentation browsers Dash, Velocity, and Zeal that contains the full documentation as offline resource.</p>"},{"location":"modules/json/#examples","title":"Examples","text":"<p>Here are some examples to give you an idea how to use the class.</p> <p>Beside the examples below, you may want to:</p> <p>\u2192 Check the documentation\\ \u2192 Browse the standalone example files</p> <p>Every API function (documented in the API Documentation) has a corresponding standalone example file. For example, the <code>emplace()</code> function has a matching emplace.cpp example file.</p>"},{"location":"modules/json/#read-json-from-a-file","title":"Read JSON from a file","text":"<p>The <code>json</code> class provides an API for manipulating a JSON value. To create a <code>json</code> object by reading a JSON file:</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;nlohmann/json.hpp&gt;\nusing json = nlohmann::json;\n\n// ...\n\nstd::ifstream f(\"example.json\");\njson data = json::parse(f);\n</code></pre>"},{"location":"modules/json/#creating-json-objects-from-json-literals","title":"Creating <code>json</code> objects from JSON literals","text":"<p>Assume you want to create hard-code this literal JSON value in a file, as a <code>json</code> object:</p> <pre><code>{\n  \"pi\": 3.141,\n  \"happy\": true\n}\n</code></pre> <p>There are various options:</p> <pre><code>// Using (raw) string literals and json::parse\njson ex1 = json::parse(R\"(\n  {\n    \"pi\": 3.141,\n    \"happy\": true\n  }\n)\");\n\n// Using user-defined (raw) string literals\nusing namespace nlohmann::literals;\njson ex2 = R\"(\n  {\n    \"pi\": 3.141,\n    \"happy\": true\n  }\n)\"_json;\n\n// Using initializer lists\njson ex3 = {\n  {\"happy\", true},\n  {\"pi\", 3.141},\n};\n</code></pre>"},{"location":"modules/json/#json-as-first-class-data-type","title":"JSON as first-class data type","text":"<p>Here are some examples to give you an idea how to use the class.</p> <p>Assume you want to create the JSON object</p> <pre><code>{\n  \"pi\": 3.141,\n  \"happy\": true,\n  \"name\": \"Niels\",\n  \"nothing\": null,\n  \"answer\": {\n    \"everything\": 42\n  },\n  \"list\": [1, 0, 2],\n  \"object\": {\n    \"currency\": \"USD\",\n    \"value\": 42.99\n  }\n}\n</code></pre> <p>With this library, you could write:</p> <pre><code>// create an empty structure (null)\njson j;\n\n// add a number that is stored as double (note the implicit conversion of j to an object)\nj[\"pi\"] = 3.141;\n\n// add a Boolean that is stored as bool\nj[\"happy\"] = true;\n\n// add a string that is stored as std::string\nj[\"name\"] = \"Niels\";\n\n// add another null object by passing nullptr\nj[\"nothing\"] = nullptr;\n\n// add an object inside the object\nj[\"answer\"][\"everything\"] = 42;\n\n// add an array that is stored as std::vector (using an initializer list)\nj[\"list\"] = { 1, 0, 2 };\n\n// add another object (using an initializer list of pairs)\nj[\"object\"] = { {\"currency\", \"USD\"}, {\"value\", 42.99} };\n\n// instead, you could also write (which looks very similar to the JSON above)\njson j2 = {\n  {\"pi\", 3.141},\n  {\"happy\", true},\n  {\"name\", \"Niels\"},\n  {\"nothing\", nullptr},\n  {\"answer\", {\n    {\"everything\", 42}\n  }},\n  {\"list\", {1, 0, 2}},\n  {\"object\", {\n    {\"currency\", \"USD\"},\n    {\"value\", 42.99}\n  }}\n};\n</code></pre> <p>Note that in all these cases, you never need to \"tell\" the compiler which JSON value type you want to use. If you want to be explicit or express some edge cases, the functions <code>json::array()</code> and <code>json::object()</code> will help:</p> <pre><code>// a way to express the empty array []\njson empty_array_explicit = json::array();\n\n// ways to express the empty object {}\njson empty_object_implicit = json({});\njson empty_object_explicit = json::object();\n\n// a way to express an _array_ of key/value pairs [[\"currency\", \"USD\"], [\"value\", 42.99]]\njson array_not_object = json::array({ {\"currency\", \"USD\"}, {\"value\", 42.99} });\n</code></pre>"},{"location":"modules/json/#serialization-deserialization","title":"Serialization / Deserialization","text":""},{"location":"modules/json/#tofrom-strings","title":"To/from strings","text":"<p>You can create a JSON value (deserialization) by appending <code>_json</code> to a string literal:</p> <pre><code>// create object from string literal\njson j = \"{ \\\"happy\\\": true, \\\"pi\\\": 3.141 }\"_json;\n\n// or even nicer with a raw string literal\nauto j2 = R\"(\n  {\n    \"happy\": true,\n    \"pi\": 3.141\n  }\n)\"_json;\n</code></pre> <p>Note that without appending the <code>_json</code> suffix, the passed string literal is not parsed, but just used as JSON string value. That is, <code>json j = \"{ \\\"happy\\\": true, \\\"pi\\\": 3.141 }\"</code> would just store the string <code>\"{ \"happy\": true, \"pi\": 3.141 }\"</code> rather than parsing the actual object.</p> <p>The string literal should be brought into scope with <code>using namespace nlohmann::literals;</code> (see <code>json::parse()</code>).</p> <p>The above example can also be expressed explicitly using <code>json::parse()</code>:</p> <pre><code>// parse explicitly\nauto j3 = json::parse(R\"({\"happy\": true, \"pi\": 3.141})\");\n</code></pre> <p>You can also get a string representation of a JSON value (serialize):</p> <pre><code>// explicit conversion to string\nstd::string s = j.dump();    // {\"happy\":true,\"pi\":3.141}\n\n// serialization with pretty printing\n// pass in the amount of spaces to indent\nstd::cout &lt;&lt; j.dump(4) &lt;&lt; std::endl;\n// {\n//     \"happy\": true,\n//     \"pi\": 3.141\n// }\n</code></pre> <p>Note the difference between serialization and assignment:</p> <pre><code>// store a string in a JSON value\njson j_string = \"this is a string\";\n\n// retrieve the string value\nauto cpp_string = j_string.template get&lt;std::string&gt;();\n// retrieve the string value (alternative when a variable already exists)\nstd::string cpp_string2;\nj_string.get_to(cpp_string2);\n\n// retrieve the serialized value (explicit JSON serialization)\nstd::string serialized_string = j_string.dump();\n\n// output of original string\nstd::cout &lt;&lt; cpp_string &lt;&lt; \" == \" &lt;&lt; cpp_string2 &lt;&lt; \" == \" &lt;&lt; j_string.template get&lt;std::string&gt;() &lt;&lt; '\\n';\n// output of serialized value\nstd::cout &lt;&lt; j_string &lt;&lt; \" == \" &lt;&lt; serialized_string &lt;&lt; std::endl;\n</code></pre> <p><code>.dump()</code> returns the originally stored string value.</p> <p>Note the library only supports UTF-8. When you store strings with different encodings in the library, calling <code>dump()</code> may throw an exception unless <code>json::error_handler_t::replace</code> or <code>json::error_handler_t::ignore</code> are used as error handlers.</p>"},{"location":"modules/json/#tofrom-streams-eg-files-string-streams","title":"To/from streams (e.g. files, string streams)","text":"<p>You can also use streams to serialize and deserialize:</p> <pre><code>// deserialize from standard input\njson j;\nstd::cin &gt;&gt; j;\n\n// serialize to standard output\nstd::cout &lt;&lt; j;\n\n// the setw manipulator was overloaded to set the indentation for pretty printing\nstd::cout &lt;&lt; std::setw(4) &lt;&lt; j &lt;&lt; std::endl;\n</code></pre> <p>These operators work for any subclasses of <code>std::istream</code> or <code>std::ostream</code>. Here is the same example with files:</p> <pre><code>// read a JSON file\nstd::ifstream i(\"file.json\");\njson j;\ni &gt;&gt; j;\n\n// write prettified JSON to another file\nstd::ofstream o(\"pretty.json\");\no &lt;&lt; std::setw(4) &lt;&lt; j &lt;&lt; std::endl;\n</code></pre> <p>Please note that setting the exception bit for <code>failbit</code> is inappropriate for this use case. It will result in program termination due to the <code>noexcept</code> specifier in use.</p>"},{"location":"modules/json/#read-from-iterator-range","title":"Read from iterator range","text":"<p>You can also parse JSON from an iterator range; that is, from any container accessible by iterators whose <code>value_type</code> is an integral type of 1, 2 or 4 bytes, which will be interpreted as UTF-8, UTF-16 and UTF-32 respectively. For instance, a <code>std::vector&lt;std::uint8_t&gt;</code>, or a <code>std::list&lt;std::uint16_t&gt;</code>:</p> <pre><code>std::vector&lt;std::uint8_t&gt; v = {'t', 'r', 'u', 'e'};\njson j = json::parse(v.begin(), v.end());\n</code></pre> <p>You may leave the iterators for the range [begin, end):</p> <pre><code>std::vector&lt;std::uint8_t&gt; v = {'t', 'r', 'u', 'e'};\njson j = json::parse(v);\n</code></pre>"},{"location":"modules/json/#custom-data-source","title":"Custom data source","text":"<p>Since the parse function accepts arbitrary iterator ranges, you can provide your own data sources by implementing the <code>LegacyInputIterator</code> concept.</p> <pre><code>struct MyContainer {\n  void advance();\n  const char&amp; get_current();\n};\n\nstruct MyIterator {\n    using difference_type = std::ptrdiff_t;\n    using value_type = char;\n    using pointer = const char*;\n    using reference = const char&amp;;\n    using iterator_category = std::input_iterator_tag;\n\n    MyIterator&amp; operator++() {\n        MyContainer.advance();\n        return *this;\n    }\n\n    bool operator!=(const MyIterator&amp; rhs) const {\n        return rhs.target != target;\n    }\n\n    reference operator*() const {\n        return target.get_current();\n    }\n\n    MyContainer* target = nullptr;\n};\n\nMyIterator begin(MyContainer&amp; tgt) {\n    return MyIterator{&amp;tgt};\n}\n\nMyIterator end(const MyContainer&amp;) {\n    return {};\n}\n\nvoid foo() {\n    MyContainer c;\n    json j = json::parse(c);\n}\n</code></pre>"},{"location":"modules/json/#sax-interface","title":"SAX interface","text":"<p>The library uses a SAX-like interface with the following functions:</p> <pre><code>// called when null is parsed\nbool null();\n\n// called when a boolean is parsed; value is passed\nbool boolean(bool val);\n\n// called when a signed or unsigned integer number is parsed; value is passed\nbool number_integer(number_integer_t val);\nbool number_unsigned(number_unsigned_t val);\n\n// called when a floating-point number is parsed; value and original string is passed\nbool number_float(number_float_t val, const string_t&amp; s);\n\n// called when a string is parsed; value is passed and can be safely moved away\nbool string(string_t&amp; val);\n// called when a binary value is parsed; value is passed and can be safely moved away\nbool binary(binary_t&amp; val);\n\n// called when an object or array begins or ends, resp. The number of elements is passed (or -1 if not known)\nbool start_object(std::size_t elements);\nbool end_object();\nbool start_array(std::size_t elements);\nbool end_array();\n// called when an object key is parsed; value is passed and can be safely moved away\nbool key(string_t&amp; val);\n\n// called when a parse error occurs; byte position, the last token, and an exception is passed\nbool parse_error(std::size_t position, const std::string&amp; last_token, const detail::exception&amp; ex);\n</code></pre> <p>The return value of each function determines whether parsing should proceed.</p> <p>To implement your own SAX handler, proceed as follows:</p> <ol> <li>Implement the SAX interface in a class. You can use class <code>nlohmann::json_sax&lt;json&gt;</code> as base class, but you can also use any class where the functions described above are implemented and public.</li> <li>Create an object of your SAX interface class, e.g. <code>my_sax</code>.</li> <li>Call <code>bool json::sax_parse(input, &amp;my_sax)</code>; where the first parameter can be any input like a string or an input stream and the second parameter is a pointer to your SAX interface.</li> </ol> <p>Note the <code>sax_parse</code> function only returns a <code>bool</code> indicating the result of the last executed SAX event. It does not return a  <code>json</code> value - it is up to you to decide what to do with the SAX events. Furthermore, no exceptions are thrown in case of a parse error - it is up to you what to do with the exception object passed to your <code>parse_error</code> implementation. Internally, the SAX interface is used for the DOM parser (class <code>json_sax_dom_parser</code>) as well as the acceptor (<code>json_sax_acceptor</code>), see file <code>json_sax.hpp</code>.</p>"},{"location":"modules/json/#stl-like-access","title":"STL-like access","text":"<p>We designed the JSON class to behave just like an STL container. In fact, it satisfies the ReversibleContainer requirement.</p> <pre><code>// create an array using push_back\njson j;\nj.push_back(\"foo\");\nj.push_back(1);\nj.push_back(true);\n\n// also use emplace_back\nj.emplace_back(1.78);\n\n// iterate the array\nfor (json::iterator it = j.begin(); it != j.end(); ++it) {\n  std::cout &lt;&lt; *it &lt;&lt; '\\n';\n}\n\n// range-based for\nfor (auto&amp; element : j) {\n  std::cout &lt;&lt; element &lt;&lt; '\\n';\n}\n\n// getter/setter\nconst auto tmp = j[0].template get&lt;std::string&gt;();\nj[1] = 42;\nbool foo = j.at(2);\n\n// comparison\nj == R\"([\"foo\", 1, true, 1.78])\"_json;  // true\n\n// other stuff\nj.size();     // 4 entries\nj.empty();    // false\nj.type();     // json::value_t::array\nj.clear();    // the array is empty again\n\n// convenience type checkers\nj.is_null();\nj.is_boolean();\nj.is_number();\nj.is_object();\nj.is_array();\nj.is_string();\n\n// create an object\njson o;\no[\"foo\"] = 23;\no[\"bar\"] = false;\no[\"baz\"] = 3.141;\n\n// also use emplace\no.emplace(\"weather\", \"sunny\");\n\n// special iterator member functions for objects\nfor (json::iterator it = o.begin(); it != o.end(); ++it) {\n  std::cout &lt;&lt; it.key() &lt;&lt; \" : \" &lt;&lt; it.value() &lt;&lt; \"\\n\";\n}\n\n// the same code as range for\nfor (auto&amp; el : o.items()) {\n  std::cout &lt;&lt; el.key() &lt;&lt; \" : \" &lt;&lt; el.value() &lt;&lt; \"\\n\";\n}\n\n// even easier with structured bindings (C++17)\nfor (auto&amp; [key, value] : o.items()) {\n  std::cout &lt;&lt; key &lt;&lt; \" : \" &lt;&lt; value &lt;&lt; \"\\n\";\n}\n\n// find an entry\nif (o.contains(\"foo\")) {\n  // there is an entry with key \"foo\"\n}\n\n// or via find and an iterator\nif (o.find(\"foo\") != o.end()) {\n  // there is an entry with key \"foo\"\n}\n\n// or simpler using count()\nint foo_present = o.count(\"foo\"); // 1\nint fob_present = o.count(\"fob\"); // 0\n\n// delete an entry\no.erase(\"foo\");\n</code></pre>"},{"location":"modules/json/#conversion-from-stl-containers","title":"Conversion from STL containers","text":"<p>Any sequence container (<code>std::array</code>, <code>std::vector</code>, <code>std::deque</code>, <code>std::forward_list</code>, <code>std::list</code>) whose values can be used to construct JSON values (e.g., integers, floating point numbers, Booleans, string types, or again STL containers described in this section) can be used to create a JSON array. The same holds for similar associative containers (<code>std::set</code>, <code>std::multiset</code>, <code>std::unordered_set</code>, <code>std::unordered_multiset</code>), but in these cases the order of the elements of the array depends on how the elements are ordered in the respective STL container.</p> <pre><code>std::vector&lt;int&gt; c_vector {1, 2, 3, 4};\njson j_vec(c_vector);\n// [1, 2, 3, 4]\n\nstd::deque&lt;double&gt; c_deque {1.2, 2.3, 3.4, 5.6};\njson j_deque(c_deque);\n// [1.2, 2.3, 3.4, 5.6]\n\nstd::list&lt;bool&gt; c_list {true, true, false, true};\njson j_list(c_list);\n// [true, true, false, true]\n\nstd::forward_list&lt;int64_t&gt; c_flist {12345678909876, 23456789098765, 34567890987654, 45678909876543};\njson j_flist(c_flist);\n// [12345678909876, 23456789098765, 34567890987654, 45678909876543]\n\nstd::array&lt;unsigned long, 4&gt; c_array {{1, 2, 3, 4}};\njson j_array(c_array);\n// [1, 2, 3, 4]\n\nstd::set&lt;std::string&gt; c_set {\"one\", \"two\", \"three\", \"four\", \"one\"};\njson j_set(c_set); // only one entry for \"one\" is used\n// [\"four\", \"one\", \"three\", \"two\"]\n\nstd::unordered_set&lt;std::string&gt; c_uset {\"one\", \"two\", \"three\", \"four\", \"one\"};\njson j_uset(c_uset); // only one entry for \"one\" is used\n// maybe [\"two\", \"three\", \"four\", \"one\"]\n\nstd::multiset&lt;std::string&gt; c_mset {\"one\", \"two\", \"one\", \"four\"};\njson j_mset(c_mset); // both entries for \"one\" are used\n// maybe [\"one\", \"two\", \"one\", \"four\"]\n\nstd::unordered_multiset&lt;std::string&gt; c_umset {\"one\", \"two\", \"one\", \"four\"};\njson j_umset(c_umset); // both entries for \"one\" are used\n// maybe [\"one\", \"two\", \"one\", \"four\"]\n</code></pre> <p>Likewise, any associative key-value containers (<code>std::map</code>, <code>std::multimap</code>, <code>std::unordered_map</code>, <code>std::unordered_multimap</code>) whose keys can construct an <code>std::string</code> and whose values can be used to construct JSON values (see examples above) can be used to create a JSON object. Note that in case of multimaps only one key is used in the JSON object and the value depends on the internal order of the STL container.</p> <pre><code>std::map&lt;std::string, int&gt; c_map { {\"one\", 1}, {\"two\", 2}, {\"three\", 3} };\njson j_map(c_map);\n// {\"one\": 1, \"three\": 3, \"two\": 2 }\n\nstd::unordered_map&lt;const char*, double&gt; c_umap { {\"one\", 1.2}, {\"two\", 2.3}, {\"three\", 3.4} };\njson j_umap(c_umap);\n// {\"one\": 1.2, \"two\": 2.3, \"three\": 3.4}\n\nstd::multimap&lt;std::string, bool&gt; c_mmap { {\"one\", true}, {\"two\", true}, {\"three\", false}, {\"three\", true} };\njson j_mmap(c_mmap); // only one entry for key \"three\" is used\n// maybe {\"one\": true, \"two\": true, \"three\": true}\n\nstd::unordered_multimap&lt;std::string, bool&gt; c_ummap { {\"one\", true}, {\"two\", true}, {\"three\", false}, {\"three\", true} };\njson j_ummap(c_ummap); // only one entry for key \"three\" is used\n// maybe {\"one\": true, \"two\": true, \"three\": true}\n</code></pre>"},{"location":"modules/json/#json-pointer-and-json-patch","title":"JSON Pointer and JSON Patch","text":"<p>The library supports JSON Pointer (RFC 6901) as alternative means to address structured values. On top of this, JSON Patch (RFC 6902) allows describing differences between two JSON values - effectively allowing patch and diff operations known from Unix.</p> <pre><code>// a JSON value\njson j_original = R\"({\n  \"baz\": [\"one\", \"two\", \"three\"],\n  \"foo\": \"bar\"\n})\"_json;\n\n// access members with a JSON pointer (RFC 6901)\nj_original[\"/baz/1\"_json_pointer];\n// \"two\"\n\n// a JSON patch (RFC 6902)\njson j_patch = R\"([\n  { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" },\n  { \"op\": \"add\", \"path\": \"/hello\", \"value\": [\"world\"] },\n  { \"op\": \"remove\", \"path\": \"/foo\"}\n])\"_json;\n\n// apply the patch\njson j_result = j_original.patch(j_patch);\n// {\n//    \"baz\": \"boo\",\n//    \"hello\": [\"world\"]\n// }\n\n// calculate a JSON patch from two JSON values\njson::diff(j_result, j_original);\n// [\n//   { \"op\":\" replace\", \"path\": \"/baz\", \"value\": [\"one\", \"two\", \"three\"] },\n//   { \"op\": \"remove\",\"path\": \"/hello\" },\n//   { \"op\": \"add\", \"path\": \"/foo\", \"value\": \"bar\" }\n// ]\n</code></pre>"},{"location":"modules/json/#json-merge-patch","title":"JSON Merge Patch","text":"<p>The library supports JSON Merge Patch (RFC 7386) as a patch format. Instead of using JSON Pointer (see above) to specify values to be manipulated, it describes the changes using a syntax that closely mimics the document being modified.</p> <pre><code>// a JSON value\njson j_document = R\"({\n  \"a\": \"b\",\n  \"c\": {\n    \"d\": \"e\",\n    \"f\": \"g\"\n  }\n})\"_json;\n\n// a patch\njson j_patch = R\"({\n  \"a\":\"z\",\n  \"c\": {\n    \"f\": null\n  }\n})\"_json;\n\n// apply the patch\nj_document.merge_patch(j_patch);\n// {\n//  \"a\": \"z\",\n//  \"c\": {\n//    \"d\": \"e\"\n//  }\n// }\n</code></pre>"},{"location":"modules/json/#implicit-conversions","title":"Implicit conversions","text":"<p>Supported types can be implicitly converted to JSON values.</p> <p>It is recommended to NOT USE implicit conversions FROM a JSON value. You can find more details about this recommendation here. You can switch off implicit conversions by defining <code>JSON_USE_IMPLICIT_CONVERSIONS</code> to <code>0</code> before including the <code>json.hpp</code> header. When using CMake, you can also achieve this by setting the option <code>JSON_ImplicitConversions</code> to <code>OFF</code>.</p> <pre><code>// strings\nstd::string s1 = \"Hello, world!\";\njson js = s1;\nauto s2 = js.template get&lt;std::string&gt;();\n// NOT RECOMMENDED\nstd::string s3 = js;\nstd::string s4;\ns4 = js;\n\n// Booleans\nbool b1 = true;\njson jb = b1;\nauto b2 = jb.template get&lt;bool&gt;();\n// NOT RECOMMENDED\nbool b3 = jb;\nbool b4;\nb4 = jb;\n\n// numbers\nint i = 42;\njson jn = i;\nauto f = jn.template get&lt;double&gt;();\n// NOT RECOMMENDED\ndouble f2 = jb;\ndouble f3;\nf3 = jb;\n\n// etc.\n</code></pre> <p>Note that <code>char</code> types are not automatically converted to JSON strings, but to integer numbers. A conversion to a string must be specified explicitly:</p> <pre><code>char ch = 'A';                       // ASCII value 65\njson j_default = ch;                 // stores integer number 65\njson j_string = std::string(1, ch);  // stores string \"A\"\n</code></pre>"},{"location":"modules/json/#arbitrary-types-conversions","title":"Arbitrary types conversions","text":"<p>Every type can be serialized in JSON, not just STL containers and scalar types. Usually, you would do something along those lines:</p> <pre><code>namespace ns {\n    // a simple struct to model a person\n    struct person {\n        std::string name;\n        std::string address;\n        int age;\n    };\n}\n\nns::person p = {\"Ned Flanders\", \"744 Evergreen Terrace\", 60};\n\n// convert to JSON: copy each value into the JSON object\njson j;\nj[\"name\"] = p.name;\nj[\"address\"] = p.address;\nj[\"age\"] = p.age;\n\n// ...\n\n// convert from JSON: copy each value from the JSON object\nns::person p {\n    j[\"name\"].template get&lt;std::string&gt;(),\n    j[\"address\"].template get&lt;std::string&gt;(),\n    j[\"age\"].template get&lt;int&gt;()\n};\n</code></pre> <p>It works, but that's quite a lot of boilerplate... Fortunately, there's a better way:</p> <pre><code>// create a person\nns::person p {\"Ned Flanders\", \"744 Evergreen Terrace\", 60};\n\n// conversion: person -&gt; json\njson j = p;\n\nstd::cout &lt;&lt; j &lt;&lt; std::endl;\n// {\"address\":\"744 Evergreen Terrace\",\"age\":60,\"name\":\"Ned Flanders\"}\n\n// conversion: json -&gt; person\nauto p2 = j.template get&lt;ns::person&gt;();\n\n// that's it\nassert(p == p2);\n</code></pre>"},{"location":"modules/json/#basic-usage","title":"Basic usage","text":"<p>To make this work with one of your types, you only need to provide two functions:</p> <pre><code>using json = nlohmann::json;\n\nnamespace ns {\n    void to_json(json&amp; j, const person&amp; p) {\n        j = json{{\"name\", p.name}, {\"address\", p.address}, {\"age\", p.age}};\n    }\n\n    void from_json(const json&amp; j, person&amp; p) {\n        j.at(\"name\").get_to(p.name);\n        j.at(\"address\").get_to(p.address);\n        j.at(\"age\").get_to(p.age);\n    }\n} // namespace ns\n</code></pre> <p>That's all! When calling the <code>json</code> constructor with your type, your custom <code>to_json</code> method will be automatically called. Likewise, when calling <code>template get&lt;your_type&gt;()</code> or <code>get_to(your_type&amp;)</code>, the <code>from_json</code> method will be called.</p> <p>Some important things:</p> <ul> <li>Those methods MUST be in your type's namespace (which can be the global namespace), or the library will not be able to locate them (in this example, they are in namespace <code>ns</code>, where <code>person</code> is defined).</li> <li>Those methods MUST be available (e.g., proper headers must be included) everywhere you use these conversions. Look at issue 1108 for errors that may occur otherwise.</li> <li>When using <code>template get&lt;your_type&gt;()</code>, <code>your_type</code> MUST be DefaultConstructible. (There is a way to bypass this requirement described later.)</li> <li>In function <code>from_json</code>, use function <code>at()</code> to access the object values rather than <code>operator[]</code>. In case a key does not exist, <code>at</code> throws an exception that you can handle, whereas <code>operator[]</code> exhibits undefined behavior.</li> <li>You do not need to add serializers or deserializers for STL types like <code>std::vector</code>: the library already implements these.</li> </ul>"},{"location":"modules/json/#simplify-your-life-with-macros","title":"Simplify your life with macros","text":"<p>If you just want to serialize/deserialize some structs, the <code>to_json</code>/<code>from_json</code> functions can be a lot of boilerplate.</p> <p>There are two macros to make your life easier as long as you (1) want to use a JSON object as serialization and (2) want to use the member variable names as object keys in that object:</p> <ul> <li><code>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(name, member1, member2, ...)</code> is to be defined inside the namespace of the class/struct to create code for.</li> <li><code>NLOHMANN_DEFINE_TYPE_INTRUSIVE(name, member1, member2, ...)</code> is to be defined inside the class/struct to create code for. This macro can also access private members.</li> </ul> <p>In both macros, the first parameter is the name of the class/struct, and all remaining parameters name the members.</p>"},{"location":"modules/json/#examples_1","title":"Examples","text":"<p>The <code>to_json</code>/<code>from_json</code> functions for the <code>person</code> struct above can be created with:</p> <pre><code>namespace ns {\n    NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(person, name, address, age)\n}\n</code></pre> <p>Here is an example with private members, where <code>NLOHMANN_DEFINE_TYPE_INTRUSIVE</code> is needed:</p> <pre><code>namespace ns {\n    class address {\n      private:\n        std::string street;\n        int housenumber;\n        int postcode;\n\n      public:\n        NLOHMANN_DEFINE_TYPE_INTRUSIVE(address, street, housenumber, postcode)\n    };\n}\n</code></pre>"},{"location":"modules/json/#how-do-i-convert-third-party-types","title":"How do I convert third-party types?","text":"<p>This requires a bit more advanced technique. But first, let's see how this conversion mechanism works:</p> <p>The library uses JSON Serializers to convert types to json. The default serializer for <code>nlohmann::json</code> is <code>nlohmann::adl_serializer</code> (ADL means Argument-Dependent Lookup).</p> <p>It is implemented like this (simplified):</p> <pre><code>template &lt;typename T&gt;\nstruct adl_serializer {\n    static void to_json(json&amp; j, const T&amp; value) {\n        // calls the \"to_json\" method in T's namespace\n    }\n\n    static void from_json(const json&amp; j, T&amp; value) {\n        // same thing, but with the \"from_json\" method\n    }\n};\n</code></pre> <p>This serializer works fine when you have control over the type's namespace. However, what about <code>boost::optional</code> or <code>std::filesystem::path</code> (C++17)? Hijacking the <code>boost</code> namespace is pretty bad, and it's illegal to add something other than template specializations to <code>std</code>...</p> <p>To solve this, you need to add a specialization of <code>adl_serializer</code> to the <code>nlohmann</code> namespace, here's an example:</p> <pre><code>// partial specialization (full specialization works too)\nnamespace nlohmann {\n    template &lt;typename T&gt;\n    struct adl_serializer&lt;boost::optional&lt;T&gt;&gt; {\n        static void to_json(json&amp; j, const boost::optional&lt;T&gt;&amp; opt) {\n            if (opt == boost::none) {\n                j = nullptr;\n            } else {\n              j = *opt; // this will call adl_serializer&lt;T&gt;::to_json which will\n                        // find the free function to_json in T's namespace!\n            }\n        }\n\n        static void from_json(const json&amp; j, boost::optional&lt;T&gt;&amp; opt) {\n            if (j.is_null()) {\n                opt = boost::none;\n            } else {\n                opt = j.template get&lt;T&gt;(); // same as above, but with\n                                           // adl_serializer&lt;T&gt;::from_json\n            }\n        }\n    };\n}\n</code></pre>"},{"location":"modules/json/#how-can-i-use-get-for-non-default-constructiblenon-copyable-types","title":"How can I use <code>get()</code> for non-default constructible/non-copyable types?","text":"<p>There is a way, if your type is MoveConstructible. You will need to specialize the <code>adl_serializer</code> as well, but with a special <code>from_json</code> overload:</p> <pre><code>struct move_only_type {\n    move_only_type() = delete;\n    move_only_type(int ii): i(ii) {}\n    move_only_type(const move_only_type&amp;) = delete;\n    move_only_type(move_only_type&amp;&amp;) = default;\n\n    int i;\n};\n\nnamespace nlohmann {\n    template &lt;&gt;\n    struct adl_serializer&lt;move_only_type&gt; {\n        // note: the return type is no longer 'void', and the method only takes\n        // one argument\n        static move_only_type from_json(const json&amp; j) {\n            return {j.template get&lt;int&gt;()};\n        }\n\n        // Here's the catch! You must provide a to_json method! Otherwise, you\n        // will not be able to convert move_only_type to json, since you fully\n        // specialized adl_serializer on that type\n        static void to_json(json&amp; j, move_only_type t) {\n            j = t.i;\n        }\n    };\n}\n</code></pre>"},{"location":"modules/json/#can-i-write-my-own-serializer-advanced-use","title":"Can I write my own serializer? (Advanced use)","text":"<p>Yes. You might want to take a look at <code>unit-udt.cpp</code> in the test suite, to see a few examples.</p> <p>If you write your own serializer, you'll need to do a few things:</p> <ul> <li>use a different <code>basic_json</code> alias than <code>nlohmann::json</code> (the last template parameter of <code>basic_json</code> is the <code>JSONSerializer</code>)</li> <li>use your <code>basic_json</code> alias (or a template parameter) in all your <code>to_json</code>/<code>from_json</code> methods</li> <li>use <code>nlohmann::to_json</code> and <code>nlohmann::from_json</code> when you need ADL</li> </ul> <p>Here is an example, without simplifications, that only accepts types with a size &lt;= 32, and uses ADL.</p> <pre><code>// You should use void as a second template argument\n// if you don't need compile-time checks on T\ntemplate&lt;typename T, typename SFINAE = typename std::enable_if&lt;sizeof(T) &lt;= 32&gt;::type&gt;\nstruct less_than_32_serializer {\n    template &lt;typename BasicJsonType&gt;\n    static void to_json(BasicJsonType&amp; j, T value) {\n        // we want to use ADL, and call the correct to_json overload\n        using nlohmann::to_json; // this method is called by adl_serializer,\n                                 // this is where the magic happens\n        to_json(j, value);\n    }\n\n    template &lt;typename BasicJsonType&gt;\n    static void from_json(const BasicJsonType&amp; j, T&amp; value) {\n        // same thing here\n        using nlohmann::from_json;\n        from_json(j, value);\n    }\n};\n</code></pre> <p>Be very careful when reimplementing your serializer, you can stack overflow if you don't pay attention:</p> <pre><code>template &lt;typename T, void&gt;\nstruct bad_serializer\n{\n    template &lt;typename BasicJsonType&gt;\n    static void to_json(BasicJsonType&amp; j, const T&amp; value) {\n      // this calls BasicJsonType::json_serializer&lt;T&gt;::to_json(j, value);\n      // if BasicJsonType::json_serializer == bad_serializer ... oops!\n      j = value;\n    }\n\n    template &lt;typename BasicJsonType&gt;\n    static void to_json(const BasicJsonType&amp; j, T&amp; value) {\n      // this calls BasicJsonType::json_serializer&lt;T&gt;::from_json(j, value);\n      // if BasicJsonType::json_serializer == bad_serializer ... oops!\n      value = j.template get&lt;T&gt;(); // oops!\n    }\n};\n</code></pre>"},{"location":"modules/json/#specializing-enum-conversion","title":"Specializing enum conversion","text":"<p>By default, enum values are serialized to JSON as integers. In some cases this could result in undesired behavior. If an enum is modified or re-ordered after data has been serialized to JSON, the later de-serialized JSON data may be undefined or a different enum value than was originally intended.</p> <p>It is possible to more precisely specify how a given enum is mapped to and from JSON as shown below:</p> <pre><code>// example enum type declaration\nenum TaskState {\n    TS_STOPPED,\n    TS_RUNNING,\n    TS_COMPLETED,\n    TS_INVALID=-1,\n};\n\n// map TaskState values to JSON as strings\nNLOHMANN_JSON_SERIALIZE_ENUM( TaskState, {\n    {TS_INVALID, nullptr},\n    {TS_STOPPED, \"stopped\"},\n    {TS_RUNNING, \"running\"},\n    {TS_COMPLETED, \"completed\"},\n})\n</code></pre> <p>The <code>NLOHMANN_JSON_SERIALIZE_ENUM()</code> macro declares a set of <code>to_json()</code> / <code>from_json()</code> functions for type <code>TaskState</code> while avoiding repetition and boilerplate serialization code.</p> <p>Usage:</p> <pre><code>// enum to JSON as string\njson j = TS_STOPPED;\nassert(j == \"stopped\");\n\n// json string to enum\njson j3 = \"running\";\nassert(j3.template get&lt;TaskState&gt;() == TS_RUNNING);\n\n// undefined json value to enum (where the first map entry above is the default)\njson jPi = 3.14;\nassert(jPi.template get&lt;TaskState&gt;() == TS_INVALID );\n</code></pre> <p>Just as in Arbitrary Type Conversions above, - <code>NLOHMANN_JSON_SERIALIZE_ENUM()</code> MUST be declared in your enum type's namespace (which can be the global namespace), or the library will not be able to locate it, and it will default to integer serialization. - It MUST be available (e.g., proper headers must be included) everywhere you use the conversions.</p> <p>Other Important points: - When using <code>template get&lt;ENUM_TYPE&gt;()</code>, undefined JSON values will default to the first pair specified in your map. Select this default pair carefully. - If an enum or JSON value is specified more than once in your map, the first matching occurrence from the top of the map will be returned when converting to or from JSON.</p>"},{"location":"modules/json/#binary-formats-bson-cbor-messagepack-ubjson-and-bjdata","title":"Binary formats (BSON, CBOR, MessagePack, UBJSON, and BJData)","text":"<p>Though JSON is a ubiquitous data format, it is not a very compact format suitable for data exchange, for instance over a network. Hence, the library supports BSON (Binary JSON), CBOR (Concise Binary Object Representation), MessagePack, UBJSON (Universal Binary JSON Specification) and BJData (Binary JData) to efficiently encode JSON values to byte vectors and to decode such vectors.</p> <pre><code>// create a JSON value\njson j = R\"({\"compact\": true, \"schema\": 0})\"_json;\n\n// serialize to BSON\nstd::vector&lt;std::uint8_t&gt; v_bson = json::to_bson(j);\n\n// 0x1B, 0x00, 0x00, 0x00, 0x08, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0x00, 0x01, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n\n// roundtrip\njson j_from_bson = json::from_bson(v_bson);\n\n// serialize to CBOR\nstd::vector&lt;std::uint8_t&gt; v_cbor = json::to_cbor(j);\n\n// 0xA2, 0x67, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0xF5, 0x66, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00\n\n// roundtrip\njson j_from_cbor = json::from_cbor(v_cbor);\n\n// serialize to MessagePack\nstd::vector&lt;std::uint8_t&gt; v_msgpack = json::to_msgpack(j);\n\n// 0x82, 0xA7, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0xC3, 0xA6, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00\n\n// roundtrip\njson j_from_msgpack = json::from_msgpack(v_msgpack);\n\n// serialize to UBJSON\nstd::vector&lt;std::uint8_t&gt; v_ubjson = json::to_ubjson(j);\n\n// 0x7B, 0x69, 0x07, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0x54, 0x69, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x69, 0x00, 0x7D\n\n// roundtrip\njson j_from_ubjson = json::from_ubjson(v_ubjson);\n</code></pre> <p>The library also supports binary types from BSON, CBOR (byte strings), and MessagePack (bin, ext, fixext). They are stored by default as <code>std::vector&lt;std::uint8_t&gt;</code> to be processed outside the library.</p> <pre><code>// CBOR byte string with payload 0xCAFE\nstd::vector&lt;std::uint8_t&gt; v = {0x42, 0xCA, 0xFE};\n\n// read value\njson j = json::from_cbor(v);\n\n// the JSON value has type binary\nj.is_binary(); // true\n\n// get reference to stored binary value\nauto&amp; binary = j.get_binary();\n\n// the binary value has no subtype (CBOR has no binary subtypes)\nbinary.has_subtype(); // false\n\n// access std::vector&lt;std::uint8_t&gt; member functions\nbinary.size(); // 2\nbinary[0]; // 0xCA\nbinary[1]; // 0xFE\n\n// set subtype to 0x10\nbinary.set_subtype(0x10);\n\n// serialize to MessagePack\nauto cbor = json::to_msgpack(j); // 0xD5 (fixext2), 0x10, 0xCA, 0xFE\n</code></pre>"},{"location":"modules/json/#supported-compilers","title":"Supported compilers","text":"<p>Though it's 2023 already, the support for C++11 is still a bit sparse. Currently, the following compilers are known to work:</p> <ul> <li>GCC 4.8 - 12.0 (and possibly later)</li> <li>Clang 3.4 - 15.0 (and possibly later)</li> <li>Apple Clang 9.1 - 13.1 (and possibly later)</li> <li>Intel C++ Compiler 17.0.2 (and possibly later)</li> <li>Nvidia CUDA Compiler 11.0.221 (and possibly later)</li> <li>Microsoft Visual C++ 2015 / Build Tools 14.0.25123.0 (and possibly later)</li> <li>Microsoft Visual C++ 2017 / Build Tools 15.5.180.51428 (and possibly later)</li> <li>Microsoft Visual C++ 2019 / Build Tools 16.3.1+1def00d3d (and possibly later)</li> <li>Microsoft Visual C++ 2022 / Build Tools 19.30.30709.0 (and possibly later)</li> </ul> <p>I would be happy to learn about other compilers/versions.</p> <p>Please note:</p> <ul> <li>GCC 4.8 has a bug 57824): multiline raw strings cannot be the arguments to macros. Don't use multiline raw strings directly in macros with this compiler.</li> <li> <p>Android defaults to using very old compilers and C++ libraries. To fix this, add the following to your <code>Application.mk</code>. This will switch to the LLVM C++ library, the Clang compiler, and enable C++11 and other features disabled by default.</p> <p><code>APP_STL := c++_shared NDK_TOOLCHAIN_VERSION := clang3.6 APP_CPPFLAGS += -frtti -fexceptions</code></p> <p>The code compiles successfully with Android NDK, Revision 9 - 11 (and possibly later) and CrystaX's Android NDK version 10.</p> </li> <li> <p>For GCC running on MinGW or Android SDK, the error <code>'to_string' is not a member of 'std'</code> (or similarly, for <code>strtod</code> or <code>strtof</code>) may occur. Note this is not an issue with the code,  but rather with the compiler itself. On Android, see above to build with a newer environment.  For MinGW, please refer to this site and this discussion for information on how to fix this bug. For Android NDK using <code>APP_STL := gnustl_static</code>, please refer to this discussion.</p> </li> <li> <p>Unsupported versions of GCC and Clang are rejected by <code>#error</code> directives. This can be switched off by defining <code>JSON_SKIP_UNSUPPORTED_COMPILER_CHECK</code>. Note that you can expect no support in this case.</p> </li> </ul> <p>The following compilers are currently used in continuous integration at AppVeyor, Cirrus CI, and GitHub Actions:</p> Compiler Operating System CI Provider Apple Clang 11.0.3 (clang-1103.0.32.62);  Xcode 11.7 macOS 11.7.1 GitHub Actions Apple Clang 12.0.0 (clang-1200.0.32.29);  Xcode 12.4 macOS 11.7.1 GitHub Actions Apple Clang 12.0.5 (clang-1205.0.22.11);  Xcode 12.5.1 macOS 11.7.1 GitHub Actions Apple Clang 13.0.0 (clang-1300.0.29.3);   Xcode 13.0 macOS 11.7.1 GitHub Actions Apple Clang 13.0.0 (clang-1300.0.29.3);   Xcode 13.1 macOS 12.6.1 GitHub Actions Apple Clang 13.0.0 (clang-1300.0.29.30);  Xcode 13.2.1 macOS 12.6.1 GitHub Actions Apple Clang 13.1.6 (clang-1316.0.21.2.3); Xcode 13.3.1 macOS 12.6.1 GitHub Actions Apple Clang 13.1.6 (clang-1316.0.21.2.5); Xcode 13.4.1 macOS 12.6.1 GitHub Actions Apple Clang 14.0.0 (clang-1400.0.29.102); Xcode 14.0 macOS 12.6.1 GitHub Actions Apple Clang 14.0.0 (clang-1400.0.29.102); Xcode 14.0.1 macOS 12.6.1 GitHub Actions Apple Clang 14.0.0 (clang-1400.0.29.202); Xcode 14.1 macOS 12.6.1 GitHub Actions Clang 3.5.2 Ubuntu 20.04.3 LTS GitHub Actions Clang 3.6.2 Ubuntu 20.04.3 LTS GitHub Actions Clang 3.7.1 Ubuntu 20.04.3 LTS GitHub Actions Clang 3.8.1 Ubuntu 20.04.3 LTS GitHub Actions Clang 3.9.1 Ubuntu 20.04.3 LTS GitHub Actions Clang 4.0.1 Ubuntu 20.04.3 LTS GitHub Actions Clang 5.0.2 Ubuntu 20.04.3 LTS GitHub Actions Clang 6.0.1 Ubuntu 20.04.3 LTS GitHub Actions Clang 7.0.1 Ubuntu 20.04.3 LTS GitHub Actions Clang 8.0.0 Ubuntu 20.04.3 LTS GitHub Actions Clang 9.0.0 Ubuntu 20.04.3 LTS GitHub Actions Clang 10.0.0 Ubuntu 20.04.3 LTS GitHub Actions Clang 10.0.0 with GNU-like command-line Windows-10.0.17763 GitHub Actions Clang 11.0.0 with GNU-like command-line Windows-10.0.17763 GitHub Actions Clang 11.0.0 with MSVC-like command-line Windows-10.0.17763 GitHub Actions Clang 11.0.0 Ubuntu 20.04.3 LTS GitHub Actions Clang 12.0.0 Ubuntu 20.04.3 LTS GitHub Actions Clang 12.0.0 with GNU-like command-line Windows-10.0.17763 GitHub Actions Clang 13.0.0 Ubuntu 20.04.3 LTS GitHub Actions Clang 13.0.0 with GNU-like command-line Windows-10.0.17763 GitHub Actions Clang 14.0.0 Ubuntu 20.04.3 LTS GitHub Actions Clang 14.0.0 with GNU-like command-line Windows-10.0.17763 GitHub Actions Clang 15.0.0 with GNU-like command-line Windows-10.0.17763 GitHub Actions Clang 15.0.4 Ubuntu 20.04.3 LTS GitHub Actions Clang 16.0.0 (16.0.0-++20221031071727+500876226c60-1~exp1~20221031071831.439) Ubuntu 20.04.3 LTS GitHub Actions GCC 4.8.5 (Ubuntu 4.8.5-4ubuntu2) Ubuntu 20.04.3 LTS GitHub Actions GCC 4.9.4 Ubuntu 20.04.3 LTS GitHub Actions GCC 5.5.0 Ubuntu 20.04.3 LTS GitHub Actions GCC 6.5.0 Ubuntu 20.04.3 LTS GitHub Actions GCC 7.5.0 Ubuntu 20.04.3 LTS GitHub Actions GCC 8.1.0 (i686-posix-dwarf-rev0, Built by MinGW-W64 project) Windows-10.0.17763 GitHub Actions GCC 8.1.0 (x86_64-posix-seh-rev0, Built by MinGW-W64 project) Windows-10.0.17763 GitHub Actions GCC 8.5.0 Ubuntu 20.04.3 LTS GitHub Actions GCC 9.5.0 Ubuntu 20.04.3 LTS GitHub Actions GCC 10.4.0 Ubuntu 20.04.3 LTS GitHub Actions GCC 11.1.0 Ubuntu (aarch64) Cirrus CI GCC 11.3.0 Ubuntu 20.04.3 LTS GitHub Actions GCC 12.2.0 Ubuntu 20.04.3 LTS GitHub Actions GCC 13.0.0 20220605 (experimental) Ubuntu 20.04.3 LTS GitHub Actions Intel C++ Compiler 2021.5.0.20211109 Ubuntu 20.04.3 LTS GitHub Actions NVCC 11.0.221 Ubuntu 20.04.3 LTS GitHub Actions Visual Studio 14 2015 MSVC 19.0.24241.7 (Build Engine version 14.0.25420.1) Windows-6.3.9600 AppVeyor Visual Studio 15 2017 MSVC 19.16.27035.0 (Build Engine version 15.9.21+g9802d43bc3 for .NET Framework) Windows-10.0.14393 AppVeyor Visual Studio 16 2019 MSVC 19.28.29912.0 (Build Engine version 16.9.0+57a23d249 for .NET Framework) Windows-10.0.17763 GitHub Actions Visual Studio 16 2019 MSVC 19.28.29912.0 (Build Engine version 16.9.0+57a23d249 for .NET Framework) Windows-10.0.17763 AppVeyor Visual Studio 17 2022 MSVC 19.30.30709.0 (Build Engine version 17.0.31804.368 for .NET Framework) Windows-10.0.20348 GitHub Actions"},{"location":"modules/json/#integration","title":"Integration","text":"<p><code>json.hpp</code> is the single required file in <code>single_include/nlohmann</code> or released here. You need to add</p> <pre><code>#include &lt;nlohmann/json.hpp&gt;\n\n// for convenience\nusing json = nlohmann::json;\n</code></pre> <p>to the files you want to process JSON and set the necessary switches to enable C++11 (e.g., <code>-std=c++11</code> for GCC and Clang).</p> <p>You can further use file <code>include/nlohmann/json_fwd.hpp</code> for forward-declarations. The installation of json_fwd.hpp (as part of cmake's install step), can be achieved by setting <code>-DJSON_MultipleHeaders=ON</code>.</p>"},{"location":"modules/json/#cmake","title":"CMake","text":"<p>You can also use the <code>nlohmann_json::nlohmann_json</code> interface target in CMake.  This target populates the appropriate usage requirements for <code>INTERFACE_INCLUDE_DIRECTORIES</code> to point to the appropriate include directories and <code>INTERFACE_COMPILE_FEATURES</code> for the necessary C++11 flags.</p>"},{"location":"modules/json/#external","title":"External","text":"<p>To use this library from a CMake project, you can locate it directly with <code>find_package()</code> and use the namespaced imported target from the generated package configuration:</p> <pre><code># CMakeLists.txt\nfind_package(nlohmann_json 3.2.0 REQUIRED)\n...\nadd_library(foo ...)\n...\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n</code></pre> <p>The package configuration file, <code>nlohmann_jsonConfig.cmake</code>, can be used either from an install tree or directly out of the build tree.</p>"},{"location":"modules/json/#embedded","title":"Embedded","text":"<p>To embed the library directly into an existing CMake project, place the entire source tree in a subdirectory and call <code>add_subdirectory()</code> in your <code>CMakeLists.txt</code> file:</p> <pre><code># Typically you don't care so much for a third party library's tests to be\n# run from your own project's code.\nset(JSON_BuildTests OFF CACHE INTERNAL \"\")\n\n# If you only include this third party in PRIVATE source files, you do not\n# need to install it when your main project gets installed.\n# set(JSON_Install OFF CACHE INTERNAL \"\")\n\n# Don't use include(nlohmann_json/CMakeLists.txt) since that carries with it\n# unintended consequences that will break the build.  It's generally\n# discouraged (although not necessarily well documented as such) to use\n# include(...) for pulling in other CMake projects anyways.\nadd_subdirectory(nlohmann_json)\n...\nadd_library(foo ...)\n...\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n</code></pre>"},{"location":"modules/json/#embedded-fetchcontent","title":"Embedded (FetchContent)","text":"<p>Since CMake v3.11, FetchContent can be used to automatically download a release as a dependency at configure time.</p> <p>Example:</p> <pre><code>include(FetchContent)\n\nFetchContent_Declare(json URL https://github.com/nlohmann/json/releases/download/v3.11.2/json.tar.xz)\nFetchContent_MakeAvailable(json)\n\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n</code></pre> <p>Note: It is recommended to use the URL approach described above which is supported as of version 3.10.0. See https://json.nlohmann.me/integration/cmake/#fetchcontent for more information.</p>"},{"location":"modules/json/#supporting-both","title":"Supporting Both","text":"<p>To allow your project to support either an externally supplied or an embedded JSON library, you can use a pattern akin to the following:</p> <pre><code># Top level CMakeLists.txt\nproject(FOO)\n...\noption(FOO_USE_EXTERNAL_JSON \"Use an external JSON library\" OFF)\n...\nadd_subdirectory(thirdparty)\n...\nadd_library(foo ...)\n...\n# Note that the namespaced target will always be available regardless of the\n# import method\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n</code></pre> <pre><code># thirdparty/CMakeLists.txt\n...\nif(FOO_USE_EXTERNAL_JSON)\n  find_package(nlohmann_json 3.2.0 REQUIRED)\nelse()\n  set(JSON_BuildTests OFF CACHE INTERNAL \"\")\n  add_subdirectory(nlohmann_json)\nendif()\n...\n</code></pre> <p><code>thirdparty/nlohmann_json</code> is then a complete copy of this source tree.</p>"},{"location":"modules/json/#package-managers","title":"Package Managers","text":"<p>:beer: If you are using OS X and Homebrew, just type <code>brew install nlohmann-json</code> and you're set. If you want the bleeding edge rather than the latest release, use <code>brew install nlohmann-json --HEAD</code>. See nlohmann-json for more information.</p> <p>If you are using the Meson Build System, add this source tree as a meson subproject. You may also use the <code>include.zip</code> published in this project's Releases to reduce the size of the vendored source tree. Alternatively, you can get a wrap file by downloading it from Meson WrapDB, or simply use <code>meson wrap install nlohmann_json</code>. Please see the meson project for any issues regarding the packaging.</p> <p>The provided <code>meson.build</code> can also be used as an alternative to CMake for installing <code>nlohmann_json</code> system-wide in which case a pkg-config file is installed. To use it, simply have your build system require the <code>nlohmann_json</code> pkg-config dependency. In Meson, it is preferred to use the <code>dependency()</code> object with a subproject fallback, rather than using the subproject directly.</p> <p>If you are using Bazel you can simply reference this repository using <code>http_archive</code> or <code>git_repository</code> and depend on <code>@nlohmann_json//:json</code>.</p> <p>If you are using Conan to manage your dependencies, merely add <code>nlohmann_json/x.y.z</code> to your <code>conanfile</code>'s requires, where <code>x.y.z</code> is the release version you want to use. Please file issues here if you experience problems with the packages.</p> <p>If you are using Spack to manage your dependencies, you can use the <code>nlohmann-json</code> package. Please see the spack project for any issues regarding the packaging.</p> <p>If you are using hunter on your project for external dependencies, then you can use the nlohmann_json package. Please see the hunter project for any issues regarding the packaging.</p> <p>If you are using Buckaroo, you can install this library's module with <code>buckaroo add github.com/buckaroo-pm/nlohmann-json</code>. Please file issues here. There is a demo repo here.</p> <p>If you are using vcpkg on your project for external dependencies, then you can install the nlohmann-json package with <code>vcpkg install nlohmann-json</code> and follow the then displayed descriptions. Please see the vcpkg project for any issues regarding the packaging.</p> <p>If you are using cget, you can install the latest development version with <code>cget install nlohmann/json</code>. A specific version can be installed with <code>cget install nlohmann/json@v3.1.0</code>. Also, the multiple header version can be installed by adding the <code>-DJSON_MultipleHeaders=ON</code> flag (i.e., <code>cget install nlohmann/json -DJSON_MultipleHeaders=ON</code>).</p> <p>If you are using CocoaPods, you can use the library by adding pod <code>\"nlohmann_json\", '~&gt;3.1.2'</code> to your podfile (see an example). Please file issues here.</p> <p>If you are using Swift Package Manager, you can use the library by adding a package dependency to this repository. And target dependency as <code>.product(name: \"nlohmann-json\", package: \"json\")</code>.</p> <p>If you are using NuGet, you can use the package nlohmann.json. Please check this extensive description on how to use the package. Please file issues here.</p> <p>If you are using conda, you can use the package nlohmann_json from conda-forge executing <code>conda install -c conda-forge nlohmann_json</code>. Please file issues here.</p> <p>If you are using MSYS2, you can use the mingw-w64-nlohmann-json package, just type <code>pacman -S mingw-w64-i686-nlohmann-json</code> or <code>pacman -S mingw-w64-x86_64-nlohmann-json</code> for installation. Please file issues here if you experience problems with the packages.</p> <p>If you are using MacPorts, execute <code>sudo port install nlohmann-json</code> to install the nlohmann-json package.</p> <p>If you are using <code>build2</code>, you can use the <code>nlohmann-json</code> package from the public repository https://cppget.org or directly from the package's sources repository. In your project's <code>manifest</code> file, just add <code>depends: nlohmann-json</code> (probably with some version constraints). If you are not familiar with using dependencies in <code>build2</code>, please read this introduction. Please file issues here if you experience problems with the packages.</p> <p>If you are using <code>wsjcpp</code>, you can use the command <code>wsjcpp install \"https://github.com/nlohmann/json:develop\"</code> to get the latest version. Note you can change the branch \":develop\" to an existing tag or another branch.</p> <p>If you are using <code>CPM.cmake</code>, you can check this <code>example</code>. After adding CPM script to your project, implement the following snippet to your CMake:</p> <pre><code>CPMAddPackage(\n    NAME nlohmann_json\n    GITHUB_REPOSITORY nlohmann/json\n    VERSION 3.9.1)\n</code></pre>"},{"location":"modules/json/#pkg-config","title":"Pkg-config","text":"<p>If you are using bare Makefiles, you can use <code>pkg-config</code> to generate the include flags that point to where the library is installed:</p> <pre><code>pkg-config nlohmann_json --cflags\n</code></pre> <p>Users of the Meson build system will also be able to use a system-wide library, which will be found by <code>pkg-config</code>:</p> <pre><code>json = dependency('nlohmann_json', required: true)\n</code></pre>"},{"location":"modules/json/#license","title":"License","text":"<p>The class is licensed under the MIT License:</p> <p>Copyright \u00a9 2013-2022 Niels Lohmann</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>The class contains the UTF-8 Decoder from Bjoern Hoehrmann which is licensed under the MIT License (see above). Copyright \u00a9 2008-2009 Bj\u00f6rn Hoehrmann bjoern@hoehrmann.de</p> <p>The class contains a slightly modified version of the Grisu2 algorithm from Florian Loitsch which is licensed under the MIT License (see above). Copyright \u00a9 2009 Florian Loitsch</p> <p>The class contains a copy of Hedley from Evan Nemerson which is licensed as CC0-1.0.</p> <p>The class contains parts of Google Abseil which is licensed under the Apache 2.0 License.</p>"},{"location":"modules/json/#contact","title":"Contact","text":"<p>If you have questions regarding the library, I would like to invite you to open an issue at GitHub. Please describe your request, problem, or question as detailed as possible, and also mention the version of the library you are using as well as the version of your compiler and operating system. Opening an issue at GitHub allows other users and contributors to this library to collaborate. For instance, I have little experience with MSVC, and most issues in this regard have been solved by a growing community. If you have a look at the closed issues, you will see that we react quite timely in most cases.</p> <p>Only if your request would contain confidential information, please send me an email. For encrypted messages, please use this key.</p>"},{"location":"modules/json/#security","title":"Security","text":"<p>Commits by Niels Lohmann and releases are signed with this PGP Key.</p>"},{"location":"modules/json/#thanks","title":"Thanks","text":"<p>I deeply appreciate the help of the following people.</p> <p></p> <ol> <li>Teemperor implemented CMake support and lcov integration, realized escape and Unicode handling in the string parser, and fixed the JSON serialization.</li> <li>elliotgoodrich fixed an issue with double deletion in the iterator classes.</li> <li>kirkshoop made the iterators of the class composable to other libraries.</li> <li>wancw fixed a bug that hindered the class to compile with Clang.</li> <li>Tomas \u00c5blad found a bug in the iterator implementation.</li> <li>Joshua C. Randall fixed a bug in the floating-point serialization.</li> <li>Aaron Burghardt implemented code to parse streams incrementally. Furthermore, he greatly improved the parser class by allowing the definition of a filter function to discard undesired elements while parsing.</li> <li>Daniel Kope\u010dek fixed a bug in the compilation with GCC 5.0.</li> <li>Florian Weber fixed a bug in and improved the performance of the comparison operators.</li> <li>Eric Cornelius pointed out a bug in the handling with NaN and infinity values. He also improved the performance of the string escaping.</li> <li>\u6613\u601d\u9f99 implemented a conversion from anonymous enums.</li> <li>kepkin patiently pushed forward the support for Microsoft Visual studio.</li> <li>gregmarr simplified the implementation of reverse iterators and helped with numerous hints and improvements. In particular, he pushed forward the implementation of user-defined types.</li> <li>Caio Luppi fixed a bug in the Unicode handling.</li> <li>dariomt fixed some typos in the examples.</li> <li>Daniel Frey cleaned up some pointers and implemented exception-safe memory allocation.</li> <li>Colin Hirsch took care of a small namespace issue.</li> <li>Huu Nguyen correct a variable name in the documentation.</li> <li>Silverweed overloaded <code>parse()</code> to accept an rvalue reference.</li> <li>dariomt fixed a subtlety in MSVC type support and implemented the <code>get_ref()</code> function to get a reference to stored values.</li> <li>ZahlGraf added a workaround that allows compilation using Android NDK.</li> <li>whackashoe replaced a function that was marked as unsafe by Visual Studio.</li> <li>406345 fixed two small warnings.</li> <li>Glen Fernandes noted a potential portability problem in the <code>has_mapped_type</code> function.</li> <li>Corbin Hughes fixed some typos in the contribution guidelines.</li> <li>twelsby fixed the array subscript operator, an issue that failed the MSVC build, and floating-point parsing/dumping. He further added support for unsigned integer numbers and implemented better roundtrip support for parsed numbers.</li> <li>Volker Diels-Grabsch fixed a link in the README file.</li> <li>msm- added support for American Fuzzy Lop.</li> <li>Annihil fixed an example in the README file.</li> <li>Themercee noted a wrong URL in the README file.</li> <li>Lv Zheng fixed a namespace issue with <code>int64_t</code> and <code>uint64_t</code>.</li> <li>abc100m analyzed the issues with GCC 4.8 and proposed a partial solution.</li> <li>zewt added useful notes to the README file about Android.</li> <li>R\u00f3bert M\u00e1rki added a fix to use move iterators and improved the integration via CMake.</li> <li>Chris Kitching cleaned up the CMake files.</li> <li>Tom Needham fixed a subtle bug with MSVC 2015 which was also proposed by Michael K..</li> <li>M\u00e1rio Feroldi fixed a small typo.</li> <li>duncanwerner found a really embarrassing performance regression in the 2.0.0 release.</li> <li>Damien fixed one of the last conversion warnings.</li> <li>Thomas Braun fixed a warning in a test case and adjusted MSVC calls in the CI.</li> <li>Th\u00e9o DELRIEU patiently and constructively oversaw the long way toward iterator-range parsing. He also implemented the magic behind the serialization/deserialization of user-defined types and split the single header file into smaller chunks.</li> <li>Stefan fixed a minor issue in the documentation.</li> <li>Vasil Dimov fixed the documentation regarding conversions from <code>std::multiset</code>.</li> <li>ChristophJud overworked the CMake files to ease project inclusion.</li> <li>Vladimir Petrigo made a SFINAE hack more readable and added Visual Studio 17 to the build matrix.</li> <li>Denis Andrejew fixed a grammar issue in the README file.</li> <li>Pierre-Antoine Lacaze found a subtle bug in the <code>dump()</code> function.</li> <li>TurpentineDistillery pointed to <code>std::locale::classic()</code> to avoid too much locale joggling, found some nice performance improvements in the parser, improved the benchmarking code, and realized locale-independent number parsing and printing.</li> <li>cgzones had an idea how to fix the Coverity scan.</li> <li>Jared Grubb silenced a nasty documentation warning.</li> <li>Yixin Zhang fixed an integer overflow check.</li> <li>Bosswestfalen merged two iterator classes into a smaller one.</li> <li>Daniel599 helped to get Travis execute the tests with Clang's sanitizers.</li> <li>Jonathan Lee fixed an example in the README file.</li> <li>gnzlbg supported the implementation of user-defined types.</li> <li>Alexej Harm helped to get the user-defined types working with Visual Studio.</li> <li>Jared Grubb supported the implementation of user-defined types.</li> <li>EnricoBilla noted a typo in an example.</li> <li>Martin Ho\u0159e\u0148ovsk\u00fd found a way for a 2x speedup for the compilation time of the test suite.</li> <li>ukhegg found proposed an improvement for the examples section.</li> <li>rswanson-ihi noted a typo in the README.</li> <li>Mihai Stan fixed a bug in the comparison with <code>nullptr</code>s.</li> <li>Tushar Maheshwari added cotire support to speed up the compilation.</li> <li>TedLyngmo noted a typo in the README, removed unnecessary bit arithmetic, and fixed some <code>-Weffc++</code> warnings.</li> <li>Krzysztof Wo\u015b made exceptions more visible.</li> <li>ftillier fixed a compiler warning.</li> <li>tinloaf made sure all pushed warnings are properly popped.</li> <li>Fytch found a bug in the documentation.</li> <li>Jay Sistar implemented a Meson build description.</li> <li>Henry Lee fixed a warning in ICC and improved the iterator implementation.</li> <li>Vincent Thiery maintains a package for the Conan package manager.</li> <li>Steffen fixed a potential issue with MSVC and <code>std::min</code>.</li> <li>Mike Tzou fixed some typos.</li> <li>amrcode noted a misleading documentation about comparison of floats.</li> <li>Oleg Endo reduced the memory consumption by replacing <code>&lt;iostream&gt;</code> with <code>&lt;iosfwd&gt;</code>.</li> <li>dan-42 cleaned up the CMake files to simplify including/reusing of the library.</li> <li>Nikita Ofitserov allowed for moving values from initializer lists.</li> <li>Greg Hurrell fixed a typo.</li> <li>Dmitry Kukovinets fixed a typo.</li> <li>kbthomp1 fixed an issue related to the Intel OSX compiler.</li> <li>Markus Werle fixed a typo.</li> <li>WebProdPP fixed a subtle error in a precondition check.</li> <li>Alex noted an error in a code sample.</li> <li>Tom de Geus reported some warnings with ICC and helped to fix them.</li> <li>Perry Kundert simplified reading from input streams.</li> <li>Sonu Lohani fixed a small compilation error.</li> <li>Jamie Seward fixed all MSVC warnings.</li> <li>Nate Vargas added a Doxygen tag file.</li> <li>pvleuven helped to fix a warning in ICC.</li> <li>Pavel helped to fix some warnings in MSVC.</li> <li>Jamie Seward avoided unnecessary string copies in <code>find()</code> and <code>count()</code>.</li> <li>Mitja fixed some typos.</li> <li>Jorrit Wronski updated the Hunter package links.</li> <li>Matthias M\u00f6ller added a <code>.natvis</code> for the MSVC debug view.</li> <li>bogemic fixed some C++17 deprecation warnings.</li> <li>Eren Okka fixed some MSVC warnings.</li> <li>abolz integrated the Grisu2 algorithm for proper floating-point formatting, allowing more roundtrip checks to succeed.</li> <li>Vadim Evard fixed a Markdown issue in the README.</li> <li>zerodefect fixed a compiler warning.</li> <li>Kert allowed to template the string type in the serialization and added the possibility to override the exceptional behavior.</li> <li>mark-99 helped fixing an ICC error.</li> <li>Patrik Huber fixed links in the README file.</li> <li>johnfb found a bug in the implementation of CBOR's indefinite length strings.</li> <li>Paul Fultz II added a note on the cget package manager.</li> <li>Wilson Lin made the integration section of the README more concise.</li> <li>RalfBielig detected and fixed a memory leak in the parser callback.</li> <li>agrianius allowed to dump JSON to an alternative string type.</li> <li>Kevin Tonon overworked the C++11 compiler checks in CMake.</li> <li>Axel Huebl simplified a CMake check and added support for the Spack package manager.</li> <li>Carlos O'Ryan fixed a typo.</li> <li>James Upjohn fixed a version number in the compilers section.</li> <li>Chuck Atkins adjusted the CMake files to the CMake packaging guidelines and provided documentation for the CMake integration.</li> <li>Jan Sch\u00f6ppach fixed a typo.</li> <li>martin-mfg fixed a typo.</li> <li>Matthias M\u00f6ller removed the dependency from <code>std::stringstream</code>.</li> <li>agrianius added code to use alternative string implementations.</li> <li>Daniel599 allowed to use more algorithms with the <code>items()</code> function.</li> <li>Julius Rakow fixed the Meson include directory and fixed the links to cppreference.com.</li> <li>Sonu Lohani fixed the compilation with MSVC 2015 in debug mode.</li> <li>grembo fixed the test suite and re-enabled several test cases.</li> <li>Hyeon Kim introduced the macro <code>JSON_INTERNAL_CATCH</code> to control the exception handling inside the library.</li> <li>thyu fixed a compiler warning.</li> <li>David Guthrie fixed a subtle compilation error with Clang 3.4.2.</li> <li>Dennis Fischer allowed to call <code>find_package</code> without installing the library.</li> <li>Hyeon Kim fixed an issue with a double macro definition.</li> <li>Ben Berman made some error messages more understandable.</li> <li>zakalibit fixed a compilation problem with the Intel C++ compiler.</li> <li>mandreyel fixed a compilation problem.</li> <li>Kostiantyn Ponomarenko added version and license information to the Meson build file.</li> <li>Henry Schreiner added support for GCC 4.8.</li> <li>knilch made sure the test suite does not stall when run in the wrong directory.</li> <li>Antonio Borondo fixed an MSVC 2017 warning.</li> <li>Dan Gendreau implemented the <code>NLOHMANN_JSON_SERIALIZE_ENUM</code> macro to quickly define an enum/JSON mapping.</li> <li>efp added line and column information to parse errors.</li> <li>julian-becker added BSON support.</li> <li>Pratik Chowdhury added support for structured bindings.</li> <li>David Avedissian added support for Clang 5.0.1 (PS4 version).</li> <li>Jonathan Dumaresq implemented an input adapter to read from <code>FILE*</code>.</li> <li>kjpus fixed a link in the documentation.</li> <li>Manvendra Singh fixed a typo in the documentation.</li> <li>ziggurat29 fixed an MSVC warning.</li> <li>Sylvain Corlay added code to avoid an issue with MSVC.</li> <li>mefyl fixed a bug when JSON was parsed from an input stream.</li> <li>Millian Poquet allowed to install the library via Meson.</li> <li>Michael Behrns-Miller found an issue with a missing namespace.</li> <li>Nasztanovics Ferenc fixed a compilation issue with libc 2.12.</li> <li>Andreas Schwab fixed the endian conversion.</li> <li>Mark-Dunning fixed a warning in MSVC.</li> <li>Gareth Sylvester-Bradley added <code>operator/</code> for JSON Pointers.</li> <li>John-Mark noted a missing header.</li> <li>Vitaly Zaitsev fixed compilation with GCC 9.0.</li> <li>Laurent Stacul fixed compilation with GCC 9.0.</li> <li>Ivor Wanders helped to reduce the CMake requirement to version 3.1.</li> <li>njlr updated the Buckaroo instructions.</li> <li>Lion fixed a compilation issue with GCC 7 on CentOS.</li> <li>Isaac Nickaein improved the integer serialization performance and  implemented the <code>contains()</code> function.</li> <li>past-due suppressed an unfixable warning.</li> <li>Elvis Oric improved Meson support.</li> <li>Mat\u011bj Plch fixed an example in the README.</li> <li>Mark Beckwith fixed a typo.</li> <li>scinart fixed bug in the serializer.</li> <li>Patrick Boettcher implemented <code>push_back()</code> and <code>pop_back()</code> for JSON Pointers.</li> <li>Bruno Oliveira added support for Conda.</li> <li>Michele Caini fixed links in the README.</li> <li>Hani documented how to install the library with NuGet.</li> <li>Mark Beckwith fixed a typo.</li> <li>yann-morin-1998 helped to reduce the CMake requirement to version 3.1.</li> <li>Konstantin Podsvirov maintains a package for the MSYS2 software distro.</li> <li>remyabel added GNUInstallDirs to the CMake files.</li> <li>Taylor Howard fixed a unit test.</li> <li>Gabe Ron implemented the <code>to_string</code> method.</li> <li>Watal M. Iwasaki fixed a Clang warning.</li> <li>Viktor Kirilov switched the unit tests from Catch to doctest</li> <li>Juncheng E fixed a typo.</li> <li>tete17 fixed a bug in the <code>contains</code> function.</li> <li>Xav83 fixed some cppcheck warnings.</li> <li>0xflotus fixed some typos.</li> <li>Christian Deneke added a const version of <code>json_pointer::back</code>.</li> <li>Julien Hamaide made the <code>items()</code> function work with custom string types.</li> <li>Evan Nemerson updated fixed a bug in Hedley and updated this library accordingly.</li> <li>Florian Pigorsch fixed a lot of typos.</li> <li>Camille B\u00e9gu\u00e9 fixed an issue in the conversion from  <code>std::pair</code> and <code>std::tuple</code> to <code>json</code>.</li> <li>Anthony VH fixed a compile error in an enum deserialization.</li> <li>Yuriy Vountesmery noted a subtle bug in a preprocessor check.</li> <li>Chen fixed numerous issues in the library.</li> <li>Antony Kellermann added a CI step for GCC 10.1.</li> <li>Alex fixed an MSVC warning.</li> <li>Rainer proposed an improvement in the floating-point serialization in CBOR.</li> <li>Francois Chabot made performance improvements in the input adapters.</li> <li>Arthur Sonzogni documented how the library can be included via <code>FetchContent</code>.</li> <li>Rimas Misevi\u010dius fixed an error message.</li> <li>Alexander Myasnikov fixed some examples and a link in the README.</li> <li>Hubert Chathi made CMake's version config file architecture-independent.</li> <li>OmnipotentEntity implemented the binary values for CBOR, MessagePack, BSON, and UBJSON.</li> <li>ArtemSarmini fixed a compilation issue with GCC 10 and fixed a leak.</li> <li>Evgenii Sopov integrated the library to the wsjcpp package manager.</li> <li>Sergey Linev fixed a compiler warning.</li> <li>Miguel Magalh\u00e3es fixed the year in the copyright.</li> <li>Gareth Sylvester-Bradley fixed a compilation issue with MSVC.</li> <li>Alexander \u201cweej\u201d Jones fixed an example in the README.</li> <li>Antoine C\u0153ur fixed some typos in the documentation.</li> <li>jothepro updated links to the Hunter package.</li> <li>Dave Lee fixed link in the README.</li> <li>Jo\u00ebl Lamotte added instruction for using Build2's package manager.</li> <li>Paul Jurczak fixed an example in the README.</li> <li>Sonu Lohani fixed a warning.</li> <li>Carlos Gomes Martinho updated the Conan package source.</li> <li>Konstantin Podsvirov fixed the MSYS2 package documentation.</li> <li>Tridacnid improved the CMake tests.</li> <li>Michael fixed MSVC warnings.</li> <li>Quentin Barbarat fixed an example in the documentation.</li> <li>XyFreak fixed a compiler warning.</li> <li>TotalCaesar659 fixed links in the README.</li> <li>Tanuj Garg improved the fuzzer coverage for UBSAN input.</li> <li>AODQ fixed a compiler warning.</li> <li>jwittbrodt made <code>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</code> inline.</li> <li>pfeatherstone improved the upper bound of arguments of the <code>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</code>/<code>NLOHMANN_DEFINE_TYPE_INTRUSIVE</code> macros.</li> <li>Jan Proch\u00e1zka fixed a bug in the CBOR parser for binary and string values.</li> <li>T0b1-iOS fixed a bug in the new hash implementation.</li> <li>Matthew Bauer adjusted the CBOR writer to create tags for binary subtypes.</li> <li>gatopeich implemented an ordered map container for <code>nlohmann::ordered_json</code>.</li> <li>\u00c9rico Nogueira Rolim added support for pkg-config.</li> <li>KonanM proposed an implementation for the <code>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</code>/<code>NLOHMANN_DEFINE_TYPE_INTRUSIVE</code> macros.</li> <li>Guillaume Racicot implemented <code>string_view</code> support and allowed C++20 support.</li> <li>Alex Reinking improved CMake support for <code>FetchContent</code>.</li> <li>Hannes Domani provided a GDB pretty printer.</li> <li>Lars Wirzenius reviewed the README file.</li> <li>Jun Jie fixed a compiler path in the CMake scripts.</li> <li>Ronak Buch fixed typos in the documentation.</li> <li>Alexander Karzhenkov fixed a move constructor and the Travis builds.</li> <li>Leonardo Lima added CPM.Cmake support.</li> <li>Joseph Blackman fixed a warning.</li> <li>Yaroslav updated doctest and implemented unit tests.</li> <li>Martin Stump fixed a bug in the CMake files.</li> <li>Jaakko Moisio fixed a bug in the input adapters.</li> <li>bl-ue fixed some Markdown issues in the README file.</li> <li>William A. Wieselquist fixed an example from the README.</li> <li>abbaswasim fixed an example from the README.</li> <li>Remy Jette fixed a warning.</li> <li>Fraser fixed the documentation.</li> <li>Ben Beasley updated doctest.</li> <li>Doron Behar fixed pkg-config.pc.</li> <li>raduteo fixed a warning.</li> <li>David Pfahler added the possibility to compile the library without I/O support.</li> <li>Morten Fyhn Amundsen fixed a typo.</li> <li>jpl-mac allowed to treat the library as a system header in CMake.</li> <li>Jason Dsouza fixed the indentation of the CMake file.</li> <li>offa added a link to Conan Center to the documentation.</li> <li>TotalCaesar659 updated the links in the documentation to use HTTPS.</li> <li>Rafail Giavrimis fixed the Google Benchmark default branch.</li> <li>Louis Dionne fixed a conversion operator.</li> <li>justanotheranonymoususer made the examples in the README more consistent.</li> <li>Finkman suppressed some <code>-Wfloat-equal</code> warnings.</li> <li>Ferry Huberts fixed <code>-Wswitch-enum</code> warnings.</li> <li>Arseniy Terekhin made the GDB pretty-printer robust against unset variable names.</li> <li>Amir Masoud Abdol updated the Homebrew command as nlohmann/json is now in homebrew-core.</li> <li>Hallot fixed some <code>-Wextra-semi-stmt warnings</code>.</li> <li>Giovanni Cerretani fixed <code>-Wunused</code> warnings on <code>JSON_DIAGNOSTICS</code>.</li> <li>Bogdan Popescu hosts the docset for offline documentation viewers.</li> <li>Carl Smedstad fixed an assertion error when using <code>JSON_DIAGNOSTICS</code>.</li> <li>miikka75 provided an important fix to compile C++17 code with Clang 9.</li> <li>Maarten Becker fixed a warning for shadowed variables.</li> <li>Cristi V\u00eejdea fixed typos in the <code>operator[]</code> documentation.</li> <li>Alex Beregszaszi fixed spelling mistakes in comments.</li> <li>Dirk Stolle fixed typos in documentation.</li> <li>Daniel Albuschat corrected the parameter name in the <code>parse</code> documentation.</li> <li>Prince Mendiratta fixed a link to the FAQ.</li> <li>Florian Albrechtskirchinger implemented <code>std::string_view</code> support for object keys and made dozens of other improvements.</li> <li>Qianqian Fang implemented the Binary JData (BJData) format.</li> <li>pketelsen added macros <code>NLOHMANN_DEFINE_TYPE_INTRUSIVE_WITH_DEFAULT</code> and <code>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE_WITH_DEFAULT</code>.</li> <li>DarkZeros adjusted to code to not clash with Arduino defines.</li> <li>flagarde fixed the output of <code>meta()</code> for MSVC.</li> <li>Giovanni Cerretani fixed a check for <code>std::filesystem</code>.</li> <li>Dimitris Apostolou fixed a typo.</li> <li>Ferry Huberts fixed a typo.</li> <li>Michael Nosthoff fixed a typo.</li> <li>JungHoon Lee fixed a typo.</li> <li>Faruk D. fixed the CITATION.CFF file.</li> <li>Andrea Cocito added a clarification on macro usage to the documentation.</li> <li>Krzysiek Karbowiak refactored the tests to use <code>CHECK_THROWS_WITH_AS</code>.</li> <li>Chaoqi Zhang fixed a typo.</li> <li>ivanovmp fixed a whitespace error.</li> <li>KsaNL fixed a build error when including <code>&lt;windows.h&gt;</code>.</li> <li>Andrea Pappacoda moved <code>.pc</code> and <code>.cmake</code> files to <code>share</code> directory.</li> <li>Wolf Vollprecht added the <code>patch_inplace</code> function.</li> <li>Jake Zimmerman highlighted common usage patterns in the README file.</li> <li>NN added the Visual Studio output directory to <code>.gitignore</code>.</li> <li>Romain Reignier improved the performance the vector output adapter.</li> <li>Mike fixed the <code>std::iterator_traits</code>.</li> <li>Richard Hoz\u00e1k added macro <code>JSON_NO_ENUM</code> to disable default enum conversions.</li> <li>vakokako fixed tests when compiling with C++20.</li> <li>Alexander \u201cweej\u201d Jones fixed an example in the README.</li> <li>Eli Schwartz added more files to the <code>include.zip</code> archive.</li> <li>Kevin Lu fixed a compilation issue when typedefs with certain names were present.</li> <li>Trevor Hickey improved the description of an example.</li> <li>Jef LeCompte updated the year in the README file.</li> <li>Alexandre Hamez fixed a warning.</li> <li>Maninderpal Badhan fixed a typo.</li> <li>kevin-- added a note to an example in the README file.</li> <li>I fixed a typo.</li> <li>Gregorio Litenstein fixed the Clang detection.</li> <li>Andreas Smas added a Doozer badge.</li> <li>WanCW fixed the string conversion with Clang.</li> <li>zhaohuaxishi fixed a Doxygen error.</li> <li>emvivre removed an invalid parameter from CMake.</li> <li>Tobias Hermann fixed a link in the README file.</li> <li>Michael fixed a warning.</li> <li>Ryan Mulder added <code>ensure_ascii</code> to the <code>dump</code> function.</li> <li>Muri Nicanor fixed the <code>sed</code> discovery in the Makefile.</li> <li>David Avedissian implemented SFINAE-friendly <code>iterator_traits</code>.</li> <li>AQNOUCH Mohammed fixed a typo in the README.</li> <li>Gareth Sylvester-Bradley added <code>operator/=</code> and <code>operator/</code> to construct JSON pointers.</li> <li>Michael Macnair added support for afl-fuzz testing.</li> <li>Berkus Decker fixed a typo in the README.</li> <li>Illia Polishchuk improved the CMake testing.</li> <li>Ikko Ashimine fixed a typo.</li> </ol> <p>Thanks a lot for helping out! Please let me know if I forgot someone.</p>"},{"location":"modules/json/#used-third-party-tools","title":"Used third-party tools","text":"<p>The library itself consists of a single header file licensed under the MIT license. However, it is built, tested, documented, and whatnot using a lot of third-party tools and services. Thanks a lot!</p> <ul> <li>amalgamate.py - Amalgamate C source and header files to create a single header file</li> <li>American fuzzy lop for fuzz testing</li> <li>AppVeyor for continuous integration on Windows</li> <li>Artistic Style for automatic source code indentation</li> <li>Clang for compilation with code sanitizers</li> <li>CMake for build automation</li> <li>Codacy for further code analysis</li> <li>Coveralls to measure code coverage</li> <li>Coverity Scan for static analysis</li> <li>cppcheck for static analysis</li> <li>doctest for the unit tests</li> <li>git-update-ghpages to upload the documentation to gh-pages</li> <li>GitHub Changelog Generator to generate the ChangeLog</li> <li>Google Benchmark to implement the benchmarks</li> <li>Hedley to avoid re-inventing several compiler-agnostic feature macros</li> <li>lcov to process coverage information and create an HTML view</li> <li>libFuzzer to implement fuzz testing for OSS-Fuzz</li> <li>Material for MkDocs for the style of the documentation site</li> <li>MkDocs for the documentation site</li> <li>OSS-Fuzz for continuous fuzz testing of the library (project repository)</li> <li>Probot for automating maintainer tasks such as closing stale issues, requesting missing information, or detecting toxic comments.</li> <li>Valgrind to check for correct memory management</li> </ul>"},{"location":"modules/json/#projects-using-json-for-modern-c","title":"Projects using JSON for Modern C++","text":"<p>The library is currently used in Apple macOS Sierra-Monterey and iOS 10-15. I am not sure what they are using the library for, but I am happy that it runs on so many devices.</p>"},{"location":"modules/json/#notes","title":"Notes","text":""},{"location":"modules/json/#character-encoding","title":"Character encoding","text":"<p>The library supports Unicode input as follows:</p> <ul> <li>Only UTF-8 encoded input is supported which is the default encoding for JSON according to RFC 8259.</li> <li><code>std::u16string</code> and <code>std::u32string</code> can be parsed, assuming UTF-16 and UTF-32 encoding, respectively. These encodings are not supported when reading from files or other input containers.</li> <li>Other encodings such as Latin-1 or ISO 8859-1 are not supported and will yield parse or serialization errors.</li> <li>Unicode noncharacters will not be replaced by the library.</li> <li>Invalid surrogates (e.g., incomplete pairs such as <code>\\uDEAD</code>) will yield parse errors.</li> <li>The strings stored in the library are UTF-8 encoded. When using the default string type (<code>std::string</code>), note that its length/size functions return the number of stored bytes rather than the number of characters or glyphs.</li> <li>When you store strings with different encodings in the library, calling <code>dump()</code> may throw an exception unless <code>json::error_handler_t::replace</code> or <code>json::error_handler_t::ignore</code> are used as error handlers.</li> <li>To store wide strings (e.g., <code>std::wstring</code>), you need to convert them to a UTF-8 encoded <code>std::string</code> before, see an example.</li> </ul>"},{"location":"modules/json/#comments-in-json","title":"Comments in JSON","text":"<p>This library does not support comments by default. It does so for three reasons:</p> <ol> <li>Comments are not part of the JSON specification. You may argue that <code>//</code> or <code>/* */</code> are allowed in JavaScript, but JSON is not JavaScript.</li> <li> <p>This was not an oversight: Douglas Crockford wrote on this in May 2012:</p> <p>I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability.  I know that the lack of comments makes some people sad, but it shouldn't.</p> <p>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.</p> </li> <li> <p>It is dangerous for interoperability if some libraries would add comment support while others don't. Please check The Harmful Consequences of the Robustness Principle on this.</p> </li> </ol> <p>However, you can pass set parameter <code>ignore_comments</code> to true in the <code>parse</code> function to ignore <code>//</code> or <code>/* */</code> comments. Comments will then be treated as whitespace.</p>"},{"location":"modules/json/#order-of-object-keys","title":"Order of object keys","text":"<p>By default, the library does not preserve the insertion order of object elements. This is standards-compliant, as the JSON standard defines objects as \"an unordered collection of zero or more name/value pairs\".</p> <p>If you do want to preserve the insertion order, you can try the type <code>nlohmann::ordered_json</code>. Alternatively, you can use a more sophisticated ordered map like <code>tsl::ordered_map</code> (integration) or <code>nlohmann::fifo_map</code> (integration).</p>"},{"location":"modules/json/#memory-release","title":"Memory Release","text":"<p>We checked with Valgrind and the Address Sanitizer (ASAN) that there are no memory leaks.</p> <p>If you find that a parsing program with this library does not release memory, please consider the following case, and it may be unrelated to this library.</p> <p>Your program is compiled with glibc. There is a tunable threshold that glibc uses to decide whether to actually return memory to the system or whether to cache it for later reuse. If in your program you make lots of small allocations and those small allocations are not a contiguous block and are presumably below the threshold, then they will not get returned to the OS. Here is a related issue #1924.</p>"},{"location":"modules/json/#further-notes","title":"Further notes","text":"<ul> <li>The code contains numerous debug assertions which can be switched off by defining the preprocessor macro <code>NDEBUG</code>, see the documentation of <code>assert</code>. In particular, note <code>operator[]</code> implements unchecked access for const objects: If the given key is not present, the behavior is undefined (think of a dereferenced null pointer) and yields an assertion failure if assertions are switched on. If you are not sure whether an element in an object exists, use checked access with the <code>at()</code> function. Furthermore, you can define <code>JSON_ASSERT(x)</code> to replace calls to <code>assert(x)</code>.</li> <li>As the exact number type is not defined in the JSON specification, this library tries to choose the best fitting C++ number type automatically. As a result, the type <code>double</code> may be used to store numbers which may yield floating-point exceptions in certain rare situations if floating-point exceptions have been unmasked in the calling code. These exceptions are not caused by the library and need to be fixed in the calling code, such as by re-masking the exceptions prior to calling library functions.</li> <li>The code can be compiled without C++ runtime type identification features; that is, you can use the <code>-fno-rtti</code> compiler flag.</li> <li>Exceptions are used widely within the library. They can, however, be switched off with either using the compiler flag <code>-fno-exceptions</code> or by defining the symbol <code>JSON_NOEXCEPTION</code>. In this case, exceptions are replaced by <code>abort()</code> calls. You can further control this behavior by defining <code>JSON_THROW_USER</code> (overriding <code>throw</code>), <code>JSON_TRY_USER</code> (overriding <code>try</code>), and <code>JSON_CATCH_USER</code> (overriding <code>catch</code>). Note that <code>JSON_THROW_USER</code> should leave the current scope (e.g., by throwing or aborting), as continuing after it may yield undefined behavior. Note the explanatory <code>what()</code> string of exceptions is not available for MSVC if exceptions are disabled, see #2824.</li> </ul>"},{"location":"modules/json/#execute-unit-tests","title":"Execute unit tests","text":"<p>To compile and run the tests, you need to execute</p> <pre><code>$ mkdir build\n$ cd build\n$ cmake .. -DJSON_BuildTests=On\n$ cmake --build .\n$ ctest --output-on-failure\n</code></pre> <p>Note that during the <code>ctest</code> stage, several JSON test files are downloaded from an external repository. If policies forbid downloading artifacts during testing, you can download the files yourself and pass the directory with the test files via <code>-DJSON_TestDataDirectory=path</code> to CMake. Then, no Internet connectivity is required. See issue #2189 for more information.</p> <p>If the test suite is not found, several test suites will fail like this:</p> <pre><code>===============================================================================\njson/tests/src/make_test_data_available.hpp:21:\nTEST CASE:  check test suite is downloaded\n\njson/tests/src/make_test_data_available.hpp:23: FATAL ERROR: REQUIRE( utils::check_testsuite_downloaded() ) is NOT correct!\n  values: REQUIRE( false )\n  logged: Test data not found in 'json/cmake-build-debug/json_test_data'.\n          Please execute target 'download_test_data' before running this test suite.\n          See &lt;https://github.com/nlohmann/json#execute-unit-tests&gt; for more information.\n\n===============================================================================\n</code></pre> <p>In case you have downloaded the library rather than checked out the code via Git, test <code>cmake_fetch_content_configure</code> will fail. Please execute <code>ctest -LE git_required</code> to skip these tests. See issue #2189 for more information.</p> <p>Some tests change the installed files and hence make the whole process not reproducible. Please execute <code>ctest -LE not_reproducible</code> to skip these tests. See issue #2324 for more information.</p> <p>Note you need to call <code>cmake -LE \"not_reproducible|git_required\"</code> to exclude both labels. See issue #2596 for more information.</p> <p>As Intel compilers use unsafe floating point optimization by default, the unit tests may fail. Use flag <code>/fp:precise</code> then.</p>"},{"location":"modules/json/docs/","title":"Documentation","text":""},{"location":"modules/json/docs/#generate-documentation","title":"Generate documentation","text":"<p>Note on documentation: The source files contain links to the online documentation at https://json.nlohmann.me. This URL contains the most recent documentation and should also be applicable to previous versions; documentation for deprecated functions is not removed, but marked deprecated.</p> <p>If you want to see the documentation for a specific tag or commit hash, you can generate it as follows (here for tag <code>v3.10.2</code>):</p> <pre><code>git clone https://github.com/nlohmann/json.git\ncd json\ngit checkout v3.10.2\nmake install_venv serve -C docs/mkdocs\n</code></pre> <p>Open URL http://127.0.0.1:8000/ in your browser. Replace from any URL from the source code <code>https://json.nlohmann.me</code> with <code>http://127.0.0.1:8000</code> to see the documentation for your tag or commit hash.</p>"},{"location":"modules/json/docs/docset/","title":"docset","text":"<p>The folder contains the required files to create a docset which can be used in documentation browsers like Dash, Velocity, or Zeal.</p> <p>The docset can be created with</p> <pre><code>make nlohmann_json.docset\n</code></pre> <p>The generated folder <code>nlohmann_json.docset</code> can then be opened in the documentation browser.</p> <p>A recent version is also part of the Dash user contributions.</p>"},{"location":"modules/json/docs/docset/#licenses","title":"Licenses","text":"<p>The JSON logo is public domain.</p>"},{"location":"modules/json/tests/reports/2016-09-09-nativejson_benchmark/","title":"Index","text":"<p>Results of the latest benchmark from https://github.com/miloyip/nativejson-benchmark.</p> <p>See https://github.com/nlohmann/json/issues/307 for discussion.</p> <p>Original post at 2016-09-09 to json@yahoogroups.com:</p> <p>Hi,</p> <p>This benchmark evaluated conformance, parse/stringify speed/memory, and code size. It can also be viewed as a long list of open source C/C++ JSON libraries.</p> <p>You can run the benchmark on your own machine by checkout this project.</p> <p>https://github.com/miloyip/nativejson-benchmark</p> <p>You can also view some sample results here:</p> <p>https://rawgit.com/miloyip/nativejson-benchmark/master/sample/conformance.html https://rawgit.com/miloyip/nativejson-benchmark/master/sample/performance_Corei7-4980HQ@2.80GHz_mac64_clang7.0.html</p> <p>If you make a new library, you may use this for testing conformance and performance. Afterwards, please submit a pull request.</p> <p>Enjoy!</p> <p>--  Milo Yip</p> <p>https://github.com/miloyip/ http://twitter.com/miloyip/</p>"},{"location":"modules/json/tools/amalgamate/","title":"amalgamate.py - Amalgamate C source and header files","text":"<p>Origin: https://bitbucket.org/erikedlund/amalgamate</p> <p>Mirror: https://github.com/edlund/amalgamate</p> <p><code>amalgamate.py</code> aims to make it easy to use SQLite-style C source and header amalgamation in projects.</p> <p>For more information, please refer to: http://sqlite.org/amalgamation.html</p>"},{"location":"modules/json/tools/amalgamate/#here-be-dragons","title":"Here be dragons","text":"<p><code>amalgamate.py</code> is quite dumb, it only knows the bare minimum about C code required in order to be able to handle trivial include directives. It can produce weird results for unexpected code.</p> <p>Things to be aware of:</p> <p><code>amalgamate.py</code> will not handle complex include directives correctly:</p> <pre><code>    #define HEADER_PATH \"path/to/header.h\"\n    #include HEADER_PATH\n</code></pre> <p>In the above example, <code>path/to/header.h</code> will not be included in the amalgamation (HEADER_PATH is never expanded).</p> <p><code>amalgamate.py</code> makes the assumption that each source and header file which is not empty will end in a new-line character, which is not immediately preceded by a backslash character (see 5.1.1.2p1.2 of ISO C99).</p> <p><code>amalgamate.py</code> should be usable with C++ code, but raw string literals from C++11 will definitely cause problems:</p> <pre><code>    R\"delimiter(Terrible raw \\ data \" #include &lt;sneaky.hpp&gt;)delimiter\"\n    R\"delimiter(Terrible raw \\ data \" escaping)delimiter\"\n</code></pre> <p>In the examples above, <code>amalgamate.py</code> will stop parsing the raw string literal when it encounters the first quotation mark, which will produce unexpected results.</p>"},{"location":"modules/json/tools/amalgamate/#installing-amalgamatepy","title":"Installing amalgamate.py","text":"<p>Python v.2.7.0 or higher is required.</p> <p><code>amalgamate.py</code> can be tested and installed using the following commands:</p> <pre><code>    ./test.sh &amp;&amp; sudo -k cp ./amalgamate.py /usr/local/bin/\n</code></pre>"},{"location":"modules/json/tools/amalgamate/#using-amalgamatepy","title":"Using amalgamate.py","text":"<pre><code>    amalgamate.py [-v] -c path/to/config.json -s path/to/source/dir \\\n            [-p path/to/prologue.(c|h)]\n</code></pre> <ul> <li> <p>The <code>-c, --config</code> option should specify the path to a JSON config file which    lists the source files, include paths and where to write the resulting    amalgamation. Have a look at <code>test/source.c.json</code> and <code>test/include.h.json</code>    to see two examples.</p> </li> <li> <p>The <code>-s, --source</code> option should specify the path to the source directory.    This is useful for supporting separate source and build directories.</p> </li> <li> <p>The <code>-p, --prologue</code> option should specify the path to a file which will be    added to the beginning of the amalgamation. It is optional.</p> </li> </ul>"},{"location":"modules/json/tools/gdb_pretty_printer/","title":"GDB Pretty Printer","text":"<p>File nlohmann-json.py contains a pretty printer for GDB for JSON values of this library. It was originally published as Gist by Hannes Domani.</p>"},{"location":"modules/json/tools/gdb_pretty_printer/#how-to-use","title":"How to use","text":"<ul> <li>Add line</li> </ul> <p><code>source /path/to/nlohmann-json.py</code></p> <p>to <code>~/.gdbinit</code>. Note you must replace <code>/path/to</code> with whatever path you stored file <code>nlohmann-json.py</code>. - In GDB, debug as usual. When you want to pretty-print a JSON value <code>var</code>, type</p> <p><code>p -pretty on -array on -- var</code></p> <p>The result should look like</p> <p><code>$1 = std::map with 5 elements = {         [\"Baptiste\"] = std::map with 1 element = {             [\"first\"] = \"second\"         },         [\"Emmanuel\"] = std::vector of length 3, capacity 3 = {             3,             \"25\",             0.5         },         [\"Jean\"] = 0.7,         [\"Zorg\"] = std::map with 8 elements = {             [\"array\"] = std::vector of length 3, capacity 3 = {                 1,                 0,                 2             },             [\"awesome_str\"] = \"bleh\",             [\"bool\"] = true,             [\"flex\"] = 0.2,             [\"float\"] = 5.22,             [\"int\"] = 5,             [\"nested\"] = std::map with 1 element = {                 [\"bar\"] = \"barz\"             },             [\"trap \"] = \"you fell\"         },         [\"empty\"] = nlohmann::detail::value_t::null     }</code></p> <p>Requires Python 3.9+. Last tested with GDB 12.1. See #1952 for more information. Please post questions there.</p>"},{"location":"modules/json/tools/gdb_pretty_printer/#copyright","title":"Copyright","text":"<p>MIT License</p> <p>Copyright (C) 2020 Hannes Domani</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"modules/json/tools/generate_natvis/","title":"generate_natvis.py","text":"<p>Generate the Natvis debugger visualization file for all supported namespace combinations.</p>"},{"location":"modules/json/tools/generate_natvis/#usage","title":"Usage","text":"<pre><code>./generate_natvis.py --version X.Y.Z output_directory/\n</code></pre>"},{"location":"modules/json/tools/serve_header/","title":"serve_header.py","text":"<p>Serves the <code>single_include/nlohmann/json.hpp</code> header file over HTTP(S).</p> <p>The header file is automatically amalgamated on demand.</p> <p></p>"},{"location":"modules/json/tools/serve_header/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Make sure these Python packages are installed.     <code>PyYAML     watchdog</code>     (see <code>tools/serve_header/requirements.txt</code>)</p> </li> <li> <p>To serve the header over HTTPS (which is required by Compiler Explorer at this time), a certificate is needed.    The recommended method for creating a locally-trusted certificate is to use <code>mkcert</code>.</p> </li> <li>Install the <code>mkcert</code> certificate authority into your trust store(s):      <code>$ mkcert -install</code></li> <li>Create a certificate for <code>localhost</code>:      <code>$ mkcert localhost</code>      The command will create two files, <code>localhost.pem</code> and <code>localhost-key.pem</code>, in the current working directory. It is recommended to create them in the top level or project root directory.</li> </ol>"},{"location":"modules/json/tools/serve_header/#usage","title":"Usage","text":"<p><code>serve_header.py</code> has a built-in default configuration that will serve the <code>single_include/nlohmann/json.hpp</code> header file relative to the top level or project root directory it is homed in. The built-in configuration expects the certificate <code>localhost.pem</code> and the private key <code>localhost-key.pem</code>to be located in the top level or project root directory.</p> <p>To start serving the <code>json.hpp</code> header file at <code>https://localhost:8443/json.hpp</code>, run this command from the top level or project root directory:</p> <pre><code>$ make serve_header\n</code></pre> <p>Open Compiler Explorer and try it out:</p> <pre><code>#include &lt;https://localhost:8443/json.hpp&gt;\nusing namespace nlohmann;\n\n#include &lt;iostream&gt;\n\nint main() {\n    // these macros are dynamically injected into the header file\n    std::cout &lt;&lt; JSON_BUILD_TIME &lt;&lt; \" (\" &lt;&lt; JSON_BUILD_COUNT &lt;&lt; \")\\n\";\n\n    return 0;\n}\n</code></pre> <p><code>serve_header.py</code> dynamically injects the macros <code>JSON_BUILD_COUNT</code> and <code>JSON_BUILD_TIME</code> into the served header file. By comparing build count or time output from the compiled program with the output from <code>serve_header.py</code>, one can be reasonably sure the compiled code uses the expected revision of the header file.</p>"},{"location":"modules/json/tools/serve_header/#configuration","title":"Configuration","text":"<p><code>serve_header.py</code> will try to read a configuration file <code>serve_header.yml</code> in the top level or project root directory, and will fall back on built-in defaults if the file cannot be read. An annotated example configuration can be found in <code>tools/serve_header/serve_header.yml.example</code>.</p>"},{"location":"modules/json/tools/serve_header/#serving-jsonhpp-from-multiple-project-directory-instances-or-working-trees","title":"Serving <code>json.hpp</code> from multiple project directory instances or working trees","text":"<p><code>serve_header.py</code> was designed with the goal of supporting multiple project roots or working trees at the same time. The recommended directory structure is shown below but <code>serve_header.py</code> can work with other structures as well, including a nested hierarchy.</p> <pre><code>json/          \u2b9c the parent or web server root directory\n\u251c\u2500\u2500 develop/   \u2b9c the main git checkout\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 feature1/\n\u2502   \u2514\u2500\u2500 ...      any number of additional\n\u251c\u2500\u2500 feature2/  \u2b9c working trees (e.g., created\n\u2502   \u2514\u2500\u2500 ...      with git worktree)\n\u2514\u2500\u2500 feature3/\n    \u2514\u2500\u2500 ...\n</code></pre> <p>To serve the header of each working tree at <code>https://localhost:8443/&lt;worktree&gt;/json.hpp</code>, a configuration file is needed. 1. Create the file <code>serve_header.yml</code> in the top level or project root directory of any working tree:     <code>yaml     root: ..</code>    By shifting the web server root directory up one level, the <code>single_include/nlohmann/json.hpp</code> header files relative to each sibling directory or working tree will be served.</p> <ol> <li>Start <code>serve_header.py</code> by running this command from the same top level or project root directory the configuration file is located in:     <code>$ make serve_header</code></li> </ol> <p><code>serve_header.py</code> will automatically detect the addition or removal of working trees anywhere within the configured web server root directory.</p>"},{"location":"modules/libOpenDRIVE/","title":"libOpenDRIVE","text":"<p>libOpenDRIVE is a lightweight, dependency-free, fast C++ library providing OpenDRIVE file parsing and 3D model generation. </p> <p>It's small and can be easily integrated in other projects. A core function is the parsing of OpenDRIVE files and the generation of 3D models. The library targets OpenDRIVE version 1.4.</p>"},{"location":"modules/libOpenDRIVE/#example","title":"Example","text":"<p>Here's an example of how code using libOpenDRIVE looks. For a more complete example refer to tests/test.cpp.</p> <pre><code>// load map\nodr::OpenDriveMap odr_map(\"tests/test.xodr\");\n\n// iterate roads\nfor (odr::Road road : odr_map.get_roads())\n    std::cout &lt;&lt; \"road: \" &lt;&lt; road.id &lt;&lt; \" length: \" &lt;&lt; road.length &lt;&lt; std::endl;\n\n// get xyz point for road coordinates\nodr::Road odr_road = odr_map.get_road(\"17\");\nodr::Vec3D pt_xyz = odr_road.get_xyz(2.1 /*s*/, 1.0 /*t*/, 0.0 /*h*/);\n\n// access road network attributes\nstd::string lane_type = odr_road.get_lanesection(0.0).get_lane(-1).type;\n\n// use routing graph\nodr::RoutingGraph routing_graph = odr_map.get_routing_graph();\nodr::LaneKey from(\"17\" /*road id*/, 0.0 /*lane section s0*/, 1 /*lane id*/);\nodr::LaneKey to(\"41\", 0.0, -1);\nstd::vector&lt;odr::LaneKey&gt; path = routing_graph.shortest_path(from, to);\n\n// get road network mesh\nodr::RoadNetworkMesh road_network_mesh = odr_map.get_road_network_mesh(0.1 /*eps*/);\nstd::cout &lt;&lt; road_network_mesh.get_mesh().get_obj() &lt;&lt; std::endl;\n</code></pre>"},{"location":"modules/libOpenDRIVE/#build","title":"Build","text":"<p>To build a static library by default, simply run:</p> <pre><code>mkdir build\ncd build\ncmake ..\nmake\n</code></pre> <p>If requiring a shared library, use:</p> <pre><code>cmake -DBUILD_SHARED_LIBS=ON ..\n</code></pre>"},{"location":"modules/libOpenDRIVE/#viewer","title":"Viewer","text":"<p>Check out the viewer at odrviewer.io which uses this library. Use the odrviewer project to post issues and feature requests for odrviewer.io.</p> <p><sub>Info: The Viewer and WebAssembly bindings are no longer part of this project. This is to focus more on the library functionality and avoid having to keep the bindings up-to-date. Use v0.3.0 to get the last version that still includes Viewer and WebAssembly bindings. </sub></p>"},{"location":"modules/lichtblick/","title":"Index","text":"Lichtblick <p> Lichtblick is an integrated visualization and diagnosis tool for robotics, available in your browser or as a desktop app on Linux, Windows, and macOS. </p> <p> </p> <p>Dependencies:</p> <ul> <li>Node.js v16.10+</li> <li>Git LFS</li> </ul>"},{"location":"modules/lichtblick/#rocket-getting-started","title":":rocket: Getting started","text":"<p>Clone the repository:</p> <pre><code>$ git clone https://github.com/lichtblick-suite/lichtblick.git\n</code></pre> <p>Pull large files with Git LFS:</p> <pre><code>$ git lfs pull\n</code></pre> <p>Enable corepack:</p> <pre><code>$ corepack enable\n</code></pre> <p>Install packages from <code>package.json</code>:</p> <pre><code>$ yarn install\n</code></pre> <ul> <li>If you still get errors about corepack after running <code>corepack enable</code>, try uninstalling and reinstalling Node.js. Ensure that Yarn is not separately installed from another source, but is installed via corepack.</li> </ul> <p>Launch the development environment:</p> <pre><code># To launch the desktop app (run scripts in different terminals):\n$ yarn desktop:serve        # start webpack dev server\n$ yarn desktop:start        # launch electron (make sure the desktop:serve finished to build)\n\n# To launch the web app:\n$ yarn run web:serve        # it will be avaiable in http://localhost:8080\n</code></pre> <p>:warning: Ubuntu users: the application may present some issues using GPU. In order to bypass the GPU and process it using directly the CPU (software), please run lichtblick using the variable <code>LIBGL_ALWAYS_SOFTWARE</code> set to <code>1</code>:</p> <pre><code>$ LIBGL_ALWAYS_SOFTWARE=1 yarn desktop:start\n</code></pre>"},{"location":"modules/lichtblick/#hammer_and_wrench-building-lichtblick","title":":hammer_and_wrench: Building Lichtblick","text":"<p>Build the application for production using these commands:</p> <pre><code># To build the desktop apps:\n$ yarn run desktop:build:prod   # compile necessary files\n\n- yarn run package:win         # Package for windows\n- yarn run package:darwin      # Package for macOS\n- yarn run package:linux       # Package for linux\n\n# To build the web app:\n$ yarn run web:build:prod\n\n# To build and run the web app using docker:\n$ docker build . -t lichtblick\n$ docker run -p 8080:8080 lichtblick\n\n# It is possible to clean up build files using the following command:\n$ yarn run clean\n</code></pre> <ul> <li>The desktop builds are located in the <code>dist</code> directory, and the web builds are found in the <code>web/.webpack</code> directory.</li> </ul>"},{"location":"modules/lichtblick/#pencil-license-open-source","title":":pencil: License (Open Source)","text":"<p>Lichtblick follows an open core licensing model. Most functionality is available in this repository, and can be reproduced or modified per the terms of the Mozilla Public License v2.0.</p>"},{"location":"modules/lichtblick/#handshake-contributing","title":":handshake: Contributing","text":"<p>Contributions are welcome! Lichtblick is primarily built in TypeScript and ReactJS. All potential contributors must agree to the Contributor License Agreement outlined in CONTRIBUTING.md.</p>"},{"location":"modules/lichtblick/#star-credits","title":":star: Credits","text":"<p>Lichtblick originally began as a fork of Foxglove Studio, an open-source project developed by Foxglove.</p>"},{"location":"modules/lichtblick/benchmark/","title":"Lichtblick Benchmarking","text":"<p>Benchmarks are specific combinations of layout and synthetic data playback. When a benchmark is opened, playback automatically starts and summary results are printed to the developer console.</p>"},{"location":"modules/lichtblick/benchmark/#instructions","title":"Instructions","text":"<p>Run a dev or prod build and open a benchmark URL from <code>benchmarks.txt</code>.</p> <p><code>yarn benchmark:serve</code> to start the benchmark dev build.</p> <p><code>yarn benchmark:build:prod</code> followed by <code>npx serve -p 8080 benchmark/.webpack</code>.</p>"},{"location":"modules/lichtblick/packages/suite/","title":"Lichtblick Extension API","text":"<p>This package contains type definitions for writing Lichtblick extensions.</p>"},{"location":"modules/lichtblick/packages/suite-base/","title":"@lichtblick/suite-base","text":"<p>This package contains core components used in Lichtblick.</p>"},{"location":"modules/lichtblick/packages/suite-base/#quick-start","title":"Quick start","text":"<p>When contributing to the Lichtblick codebase, you can import from <code>@lichtblick/suite-base</code> at its top-level or from lower in its directory:</p> <pre><code>import { ExtensionInfo, ExtensionLoaderContext, ExtensionLoader } from \"@lichtblick/suite-base\";\nimport fuzzyFilter from \"@lichtblick/suite-base/util/fuzzyFilter\";\n</code></pre> <p>For a full list of the package's exports, reference its <code>index.ts</code> file.</p>"},{"location":"modules/lichtblick/packages/suite-base/src/PanelAPI/","title":"PanelAPI","text":"<p>The <code>PanelAPI</code> namespace contains React Hooks and components which allow panel authors to access Lichtblick data and metadata inside their panels. Using these APIs across all panels helps ensure that data appears consistent among panels, and makes it easier for panels to support advanced features (such as multiple simultaneous data sources).</p> <p>To use PanelAPI, it's recommended that you import the whole namespace, so that all usage sites look consistent, like <code>PanelAPI.useSomething()</code>.</p> <pre><code>import * as PanelAPI from \"@lichtblick/suite-base/PanelAPI\";\n</code></pre>"},{"location":"modules/lichtblick/packages/suite-base/src/PanelAPI/#panelapiusedatasourceinfo","title":"<code>PanelAPI.useDataSourceInfo()</code>","text":"<p>\"Data source info\" encapsulates rarely-changing metadata about the sources from which Lichtblick is loading data. (A data source might be a local bag file dropped into the browser, or a bag stored on a remote server; see players and dataSources for more details.)</p> <p>Using this hook inside a panel will cause the panel to re-render automatically when the metadata changes, but this won't happen very often or during playback.</p> <pre><code> PanelAPI.useDataSourceInfo(): {\n  topics: Topic[],\n  datatypes: RosDatatypes,\n  capabilities: string[],\n  startTime?: Time,\n  playerId: string,\n};\n</code></pre>"},{"location":"modules/lichtblick/packages/suite-base/src/PanelAPI/#panelapiusemessagesbytopic","title":"<code>PanelAPI.useMessagesByTopic()</code>","text":"<p><code>useMessagesByTopic()</code> is a small wrapper around <code>PanelAPI.useMessageReducer</code> (see below). It makes it easy to just request some messages on some topics, without doing any transformations on the messages. This is convenient, but also means that the entire messages are kept in memory, so it's recommended to only use this for a small number of messages at a time (small <code>historySize</code>).</p> <p>Using this hook will cause the panel to re-render when any new messages come in on the requested topics.</p> <pre><code>PanelAPI.useMessagesByTopic(props: {|\n  topics: string[],\n  historySize: number // Number of messages to keep per topic.\n|}): { [topic: string]: Message[] };\n</code></pre>"},{"location":"modules/lichtblick/packages/suite-base/src/PanelAPI/#panelapiusemessagereducer","title":"<code>PanelAPI.useMessageReducer()</code>","text":"<p><code>useMessageReducer()</code> provides panels a way to access messages from topics. <code>useMessageReducer</code> is a fairly low-level API that many panels will use via <code>PanelAPI.useMessagesByTopic</code> (see above). Users can define how to initialize a custom state, and how to update the state based on incoming messages.</p> <p>Using this hook will cause the panel to re-render when any new messages come in on the requested topics.</p> <pre><code>PanelAPI.useMessageReducer&lt;T&gt;(props: {|\n  topics: (string | { topic: string })[],\n  restore: (prevState: ?T) =&gt; T,\n  addMessage: (prevState: T, message: Message) =&gt; T,\n|}): T;\n</code></pre>"},{"location":"modules/lichtblick/packages/suite-base/src/PanelAPI/#subscription-parameters","title":"Subscription parameters","text":"<ul> <li><code>topics</code>: set of topics to subscribe to. Changing only the topics will not cause <code>restore</code> or <code>addMessage</code>/<code>addMessages</code> to be called.</li> </ul>"},{"location":"modules/lichtblick/packages/suite-base/src/PanelAPI/#reducer-functions","title":"Reducer functions","text":"<p>The <code>useMessageReducer</code> hook returns a user-defined \"state\" (<code>T</code>). The <code>restore</code> and <code>addMessage</code>/<code>addMessages</code> callbacks specify how to initialize and update the state.</p> <p>These reducers should be wrapped in <code>useCallback()</code>, because the useMessageReducer hook will do extra work when they change, so they should change only when the interpretation of message data is actually changing.</p> <ul> <li> <p><code>restore: (?T) =&gt; T</code>:</p> </li> <li> <p>Called with <code>undefined</code> to initialize a new state when the panel first renders, and when the user seeks to a different playback time (at which point Lichtblick automatically clears out state across all panels).</p> </li> <li> <p>Called with the previous state when the <code>restore</code> or <code>addMessage</code>/<code>addMessages</code> reducer functions change. This allows the panel an opportunity to reuse its previous state when a parameter changes, without totally discarding it (as in the case of a seek) and waiting for new messages to come in from the data source.</p> <p>For example, a panel that filters some incoming messages can use <code>restore</code> to create a filtered value immediately when the filter changes. To implement this, the caller might switch from unfiltered reducers:</p> <p><code>js {   restore: (x: ?string[]) =&gt; (x || []),   addMessages: (x: string[], msgs: Message[]) =&gt; {     msgs.forEach((m) =&gt; x.concat(m.data));     return x;   }, }</code></p> <p>to reducers implementing a filter:</p> <p><code>js {   restore: (x: ?string[]) =&gt; (x ? x.filter(predicate) : []),   addMessages: (x: string[], msgs: Message[]) =&gt; {     msgs.forEach((m) =&gt;  if (predicate(m.data)) x.concat(m.data));     return x;   }, }</code></p> <p>As soon as the reducers are swapped, the new <code>restore()</code> will be called with the previous data. (If the filter is removed again, the old data that was filtered out can't be magically restored unless it was kept in the state, but hopefully future work to preload data faster than real-time will help us there.)</p> </li> <li> <p><code>addMessages?: (T, Message[]) =&gt; T</code>: called when any new messages come in on one of the requested topics. Unlike <code>addMessage</code>, this callback is provided with every new message since the last call. Optional for back compat with older panels, this is the recommended approach moving forward.</p> </li> <li> <p>(DEPRECATED) <code>addMessage?: (T, Message) =&gt; T</code>: called when any new message comes in on one of the requested topics. The return value from <code>addMessage</code> will be the new return value from <code>useMessageReducer()</code>. Will not be called if an addMessages callback was provided.</p> </li> <li> <p>Note only one of the two optional parameters above must be provided, providng neither or providing both will result in an error.</p> </li> </ul>"},{"location":"modules/lichtblick/packages/suite-base/src/i18n/","title":"Index","text":"<p>This directory contains localized strings for languages supported by Lichtblick.</p> <p>To learn more about localization, see CONTRIBUTING.md.</p>"},{"location":"modules/lichtblick/packages/suite-base/src/panels/UserScriptEditor/theme/","title":"MonacoEditor Themes","text":"<p>If you want to tweak an existing theme, go to this url, and upload the <code>.thmTheme</code> file.</p> <p>From there, you will be able to apply various colors. After you're done editing the theme, use https://bitwiser.in/monaco-themes/ to turn it into javascript:</p> <ol> <li>Download the <code>.tmTheme</code> file.</li> <li>Overwrite the existing <code>.tmTheme</code> file.</li> <li>Go to this site and upload the <code>.tmFile</code>. It will convert it into the vs-code json definition of a theme.</li> <li>Save this to a new .ts file.</li> </ol>"},{"location":"modules/lichtblick/packages/suite-desktop/","title":"@lichtblick/suite-desktop","text":"<p>This is an internal package used for bundling the Lichtblick desktop app. Its API is not considered public or stable.</p>"},{"location":"modules/lichtblick/packages/suite-web/","title":"@lichtblick/suite-web","text":"<p>This is an internal package used for bundling the Lichtblick web app. Its API is not considered public or stable.</p>"},{"location":"modules/lichtblick/web/","title":"Index","text":"<p>This is an internal package used for bundling the Lichtblick web app. Its API is not considered public or stable.</p>"},{"location":"modules/mathematics_toolbox/","title":"Mathmatics Toolbox","text":"<p>This project contains docker contexts and project example programs for several  C++ mathematics libraries making it easier to build and consume or use the libraries.</p> <p>This project uses docker as a rudimentary \"package\" for each library allowing  a given package, for example eigen3, to be included, installed, and consumed in  another docker context.</p> <p>The build context is licensed under the EPL-2.0. Review the other submodules for their respective licenses </p>"},{"location":"modules/mathematics_toolbox/#getting-started","title":"Getting Started","text":"<p>Docker and Make are required</p>"},{"location":"modules/mathematics_toolbox/#background","title":"Background","text":"<p>This project contains docker build environments and example run environments for several math libraries including:  Eigen(eigen3)\ud83d\udd17, osqp \ud83d\udd17  this project includes examples on how to compile the previously mentioned  libraries, run, include (via cmake), and install the libraries.</p>"},{"location":"modules/mathematics_toolbox/#caching","title":"Caching","text":"<p>By default all dependencies are fetch via docker hub</p>"},{"location":"modules/mathematics_toolbox/#build","title":"build","text":"<p>** The default behavior of the build target/recipe will not compile any dependencies ** A build target is provided that will build every library provided in this  project. The build target does the following: 1. Fetches all projects from docker hub (if it exists) or from local cache  (if it exists) 2. builds the docker context for example builds eigne3:latest only if it does    exist after step 1  3. Saves the docker layers and image to a local cache in ./.docker_cache</p> <p>To explicitly build a given project for example eigen3 you must explicitly call the provided <code>make build_&lt;project name&gt;</code> target for example:</p> <pre><code>make build_eigen3\n</code></pre> <p>or </p> <pre><code>make clean_build\n</code></pre> <p>to build all dependencies</p>"},{"location":"modules/mathematics_toolbox/#osqp","title":"osqp","text":"<p>In order to use the osqp library you must first build the docker context with <code>make build</code> or <code>make build_osqp</code>. After you build the osqp docker context a docker image will become available in your local docker repository:</p> <pre><code>mathmatics_toolbox(master) \u2717 (0)&gt; docker image ls | grep osqp\nosqp                          latest          338a7cc85702   About a minute ago   13.1MB\n</code></pre> <p>Once available in your docker local repository it can be included in other projects using the <code>FROM</code> key word in a docker file. The osqp context must be defined in your docker file before your main image declaration such as follows:</p> <pre><code>FROM osqp:latest as osqp \n...\nFROM ubuntu:22.04\n</code></pre> <p>After including the osqp image in your docker file you can install the pre-built library to the system libraries within your docker context such as the following:</p> <pre><code>COPY --from=osqp /tmp/osqp /tmp/osqp \nWORKDIR /tmp/osqp/build\nRUN make install/fast\n</code></pre> <p>Once installed in the system context within your docker context you can use CMake find_package in your <code>CMakeLists.txt</code> to source osqp such as follows:</p> <pre><code>find_package(osqp REQUIRED)\n</code></pre> <p>In order to compile a target with osqp you must also enable the <code>fpermissive</code> flag by adding the following to your <code>CMakeLists.txt</code>:</p> <pre><code>target_compile_options(&lt;TARGET NAME&gt; PRIVATE -fpermissive)\n</code></pre> <p>Finally, you must add the osqp to the target linked libraries in your <code>CMakeLists.txt</code> such as follows:</p> <pre><code>target_link_libraries(&lt;TARGET NAME&gt; PRIVATE osqp::osqp)\n</code></pre> <p>You should now be able to include osqp in your C++ project with:</p> <pre><code>#include \"osqp.h\"\n...\n</code></pre> <p>This project also includes a complete example test program for osqp of  everything previously explained in <code>test/osqp_hello_world</code>. To run the osqp test program use the provided target:</p> <pre><code>cd tests\nmake test_osqp\n</code></pre>"},{"location":"modules/mathematics_toolbox/#eigen","title":"eigen","text":"<p>As with the osqp library you must first build the eigen library with:  <code>make build</code> or <code>make build_eigen3</code> After building eigen3 add it to your Dockerfile:</p> <pre><code>FROM eigen3:latest as eigen3 \n...\nFROM ubuntu:22.04\n</code></pre> <p>Next, install it to the system libraries within your docker context:</p> <pre><code>COPY --from=eigen3 /tmp/eigen3 /tmp/eigen3 \nWORKDIR /tmp/eigen3/build\nRUN make install\n</code></pre> <p>Next, use <code>find_package</code> in your <code>CMakeLists.txt</code>:</p> <pre><code>find_package(Eigen3 REQUIRED)\n</code></pre> <p>and add the target link libraries for eigen:</p> <pre><code>target_link_libraries(&lt;TARGET NAME&gt; PRIVATE Eigen3::Eigen)\n</code></pre> <p>Finally, you can include eigen in your C++ sources:</p> <pre><code>#include &lt;Eigen/Dense&gt;\n...\n</code></pre> <p>There is a complete example test program provided in the prioject for eigen at: <code>tests/eigen3_hello_world</code>; refer to this.</p>"},{"location":"modules/mathematics_toolbox/#publishing-to-docker","title":"Publishing to docker","text":"<p>To build and publish a library to docker hub 1. login with docker: <code>docker login</code> 2. build all libraries manually by invoking <code>make build_&lt;library name&gt;</code> 3. call the provided publish target: <code>make publish</code></p>"},{"location":"system_and_development/adore_cli/","title":"Adore cli","text":""},{"location":"system_and_development/adore_cli/#adore-command-line-interface-cli","title":"ADORe command line interface (CLI)","text":"<p>The ADORe CLI is a docker run-time context that provides a complete set of tools for execution and development within adore. For more information on this tool please visit https://github.com/DLR-TS/adore_cli</p> <p>The ADORe CLI context provides the following features:  * Execution environment for all ADORe related program, nodes, binaries  * Pre-installed ROS 2 development tools * Pre-installed system tools such as net-tools (ping), traceroute, nmap, gdb, ZSH etc  * Pre-installed system dependencies for all ADORe ROS nodes and programs * Linked filesystem via Docker Volumes to the ADORe repository * some basic development and debugging tools</p>"},{"location":"system_and_development/adore_cli/#adore-cli-usage","title":"ADORe CLI Usage","text":"<p>Change directory to the root of the ADORe project and run:</p> <pre><code>make cli\n</code></pre> <p>On first run of the ADORe CLI the system will be built including all core modules. Initial build can take 10-15 minutes depending on system and network. </p> <p>Once the ADORe CLI context builds and starts you will be presented with a  zsh shell context:</p> <pre><code>Welcome to the ADORe Development CLI Ubuntu 20.04.6 LTS (GNU/Linux 5.19.0-45-generic x86_64)\n\n            ____ \n         __/  |_\\__\n        |           -. \n  ......'-(_)---(_)--' \n\n  Type 'help' for more information.\n\nADORe CLI: adore git:(main)  (0)&gt;  \n</code></pre> <p>This will build all necessary ADORe components and launch a docker context.</p>"},{"location":"system_and_development/adore_cli/#how-do-i-know-if-i-am-in-the-adore-cli-context","title":"How do I know if I am in the ADORe CLI context?","text":"<p>I am developing a ROS node and I want to add a system dependency. How do I do this? In the same directory adjacent or next to your <code>package.xml</code> file create a file called <code>requirements.system</code>. This file will be picked up by the ADORe CLI when it is built with:</p> <pre><code>make build\n</code></pre> <p>Example <code>requirements.system</code> file:</p> <pre><code>curl\nwget\nhtop\n</code></pre>"},{"location":"system_and_development/adore_cli/#how-do-i-know-if-i-am-in-the-adore-cli-context_1","title":"How do I know if I am in the ADORe CLI context?","text":"<ul> <li>If you are in the ADORe CLI context you should have a shell prompt similar to   the following: <code>ADORe CLI: adore git:(master)  (0)&gt;</code></li> </ul>"},{"location":"system_and_development/adore_cli/#persistence","title":"Persistence","text":"<p>When running the ADORe CLI the adore source directory is mounted as a volume. It will be mounted with the same path as the parent context. Any changes made  in the adore source tree will persist on the host/parent file system.</p>"},{"location":"system_and_development/anonymous_cloning/","title":"Anonymous cloning","text":""},{"location":"system_and_development/anonymous_cloning/#anonymous-cloning","title":"Anonymous Cloning","text":"<p>In order to make development more friendly nearly all git submodules are  configured to use git over ssh via the .gitmodules. The downside of this is that GitHub requires account keys to be configured to in order to clone the repository. If you attempt to clone without configuring your account keys you will receive  the following error:</p> <pre><code>git clone git@github.com:DLR-TS/adore.git\nCloning into 'adore'...\nThe authenticity of host 'github.com (140.82.121.3)' can't be established.\nECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com,140.82.121.3' (ECDSA) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n</code></pre>"},{"location":"system_and_development/anonymous_cloning/#anonymous-cloning-over-https","title":"Anonymous Cloning Over HTTPS","text":"<p>You can configure git to exclusively use https. This can be done with the  following commands:</p> <pre><code>git config --global url.\"https://github.com/\".insteadOf git@github.com:\ngit config --global url.\"https://\".insteadOf git://\n</code></pre> <p>Next, you can clone the repository as normal except use https:</p> <pre><code>git clone -recurse-submodules -j$(nproc) https://github.com/DLR-TS/adore.git\n</code></pre>"},{"location":"system_and_development/documentation/","title":"Documentation","text":"<p>ADORe provides several sources of Documentation which will be detailed below.</p>"},{"location":"system_and_development/documentation/#landing-page","title":"Landing page","text":"<p>The ADORe landing page is the main GitHub io information web page. Location: https://eclipse.github.io/adore/ \ud83d\udd17</p>"},{"location":"system_and_development/documentation/#mkdocs","title":"mkdocs","text":"<p>ADORe uses mkdocs to compile markdown into a searchable document hub.</p> <p>Location: https://eclipse.github.io/adore/mkdocs/ \ud83d\udd17</p>"},{"location":"system_and_development/documentation/#doxygen","title":"Doxygen","text":"<p>ADORe utilized Doxygen to auto generate in-source </p> <p>Location: doxygen_documentation.md \ud83d\udd17</p>"},{"location":"system_and_development/documentation/#gnu-make","title":"GNU Make","text":"<p>Every ADORe module provides a Makefile providing \"documentation-as-code\". To learn what a module offers inspect the available make targets. Every ADORe module also offers a <code>make help</code> target. Call 'make help' to learn what it offers such as with the following example:</p> <pre><code>adore(develop:c0ec4a8) (0)&gt; make help\nUsage: make &lt;target&gt;                                           \n  cli                                       Start ADORe CLI docker context or attach to it if it is already running\n  run                                       Execute a command in the ADORe CLI context `make run cmd=\"&lt;command to execute&gt;\"`\n  stop                                      Stop ADORe CLI docker compose context if it is running\n  build                                     Build and setup adore cli\n  clean                                     Clean ADORe  build artifacts\n  start                                     Start the ADORe CLI docker compose context\n</code></pre>"},{"location":"system_and_development/documentation/#documentation-generation","title":"Documentation Generation","text":"<p>For information on how to build the documentation please visit the Documentation Generation \ud83d\udd17 guide.</p>"},{"location":"system_and_development/documentation_generation_system/","title":"Documentation Generation","text":"<p>ADORe provides tools to generate all of the documentation detailed in the  documentation readme.</p>"},{"location":"system_and_development/documentation_generation_system/#usage-documentation-generation","title":"Usage: Documentation Generation","text":"<ol> <li>cd to the adore documentation directory:     <code>bash     cd adore/documentation</code></li> <li>Call the build target:     <code>bash     make build</code></li> </ol>"},{"location":"system_and_development/documentation_generation_system/#usage-serving-local-copy","title":"Usage: Serving local copy","text":"<p>You can build and serve the documentation locally by running the provide <code>make serve</code> target. Navigate to the documentation directory and run the following:</p> <pre><code>cd adore/documentation\nmake serve\n</code></pre> <p>Once built the documents will be available at http://localhost \ud83d\udd17 </p> <p>\u2139\ufe0fINFO: This will build and serve the documentation locally using a docker nginx image</p>"},{"location":"system_and_development/documentation_generation_system/#usage-spell-checking","title":"Usage: Spell Checking","text":"<p>The documentation system uses aspell to \"lint\" the markdown files To do an interactive spell checking session use the provided make target:</p> <pre><code>make spellcheck\n</code></pre> <p>To non-interactively lint/spellcheck all markdown documents run:</p> <pre><code>make lint\n</code></pre> <p>The spell checker (aspell) and lint targets use a custom dictionary: <code>.aspell.en.pws</code></p> <p>Words can be added to the dictionary to provide exceptions by directly editing this file or by running an interactive spell checking session as explained previously.</p>"},{"location":"system_and_development/documentation_generation_system/#usage-publication-to-gh-pages","title":"Usage: Publication (to gh-pages)","text":"<p>Steps to publish documentation to gh-pages:</p> <ol> <li> <p>Fork the ADORe repo to your personal GitHub </p> </li> <li> <p>Clone the repo locally</p> </li> <li> <p>Modify the <code>publish.env</code> file to specify an originating branch </p> <p>\u2139\ufe0fINFO: You do not need to check out the branch you wish the documentation originate from. The source branch of the gh-pages/documentation is defined in <code>publish.env</code></p> </li> <li> <p>Run the publication Make target:</p> </li> </ol> <pre><code>make publish\n</code></pre> <p>This will push a branch called <code>gh-pages</code> containing only a <code>docs</code> folder to the <code>origin</code> remote</p> <ol> <li> <p>Configure GitHub to use the branch as a \"GitHub Pages\" You have to enable <code>gh-pages</code> on the <code>docs</code> directory in order for the publication to be active. Visit <code>https://github.com/&lt;username/orginization&gt;/adore/settings/pages</code> to configure gh-pages.</p> </li> <li> <p>Optionally, create a pull/merge request to make this documentation active on the  primary ADORe repo. Make sure to lint the markdown with <code>make lint</code> before  submitting a pull/merge request.</p> </li> </ol>"},{"location":"system_and_development/doxygen_documentation/","title":"Doxygen Documentation","text":"<p>Doxygen documentation is provide as part of the ADORe Technical Reference Manual for the ADORe sources which can be found HERE.</p>"}]}