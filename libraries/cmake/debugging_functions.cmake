
message("debugging_functions.cmake loaded")

function(print_cmake_variables)
    get_cmake_property(_variableNames VARIABLES)
    list(SORT _variableNames)

    message("CMake Variables:")
    foreach(_variableName ${_variableNames})
        message("  ${_variableName} = ${${_variableName}}")
    endforeach()
endfunction()

function(_print_cmake_target_variables target)
    message("      '${target}' variables:")
    get_cmake_property(all_properties VARIABLES)

    foreach(property ${all_properties})
        if(property MATCHES "^${target}_.*")
            message("        ${property}: ${${property}}")
        endif()
        message("        ${library}_INCLUDE_DIRS: ${${library}_INCLUDE_DIRS}")
    endforeach()
endfunction()

function(print_cmake_target_variables target)
    message("      '${target}' variables:")
    get_cmake_property(all_properties VARIABLES)

    set(matching_properties "")

    foreach(property ${all_properties})
        if(property MATCHES "^${target}_.*")
            list(APPEND matching_properties ${property})
        endif()
    endforeach()

    list(SORT matching_properties)
    list(REMOVE_DUPLICATES matching_properties)

    foreach(property ${matching_properties})
        message("        ${property}: ${${property}}")
    endforeach()
endfunction()



function(print_cmake_libraries)
    get_libraries("${ADORE_LIBRARIES_DIRECTORY}/build/share" LIBRARIES)
    message("ADORE_LIBRARIES_DIRECTORY: ${ADORE_LIBRARIES_DIRECTORY}")
    message("  libraries: ${LIBRARIES}")
    message("  CMake Libraries:")
    foreach(library IN LISTS LIBRARIES)
        message("    library: ${library}")
        print_cmake_target_variables(${library})
        message(" ")
    endforeach()
endfunction()

function(print_cmake_libraries_)
    get_libraries("${ADORE_LIBRARIES_DIRECTORY}/build/share" LIBRARIES)
    message("CMake Librariesxxx:")
    get_cmake_property(variables VARIABLES)
    foreach(variable ${variables})
        if(variable MATCHES "_headers_DIR$")
            message(STATUS "  LIBRARY: ${variable}")
            message(STATUS "  VALUE: ${${variable}_headers_DIR}")
            set("headers_DIR" "${variable}_headers_DIR")
            message(STATUS "  adding include directories: ${${headers_DIR}}")
            set("headers_DIR" "")
        endif()
    endforeach()
endfunction()

function(print_cmake_targets)
    message("")
    message("CMake Targets: ")
    get_property(targets GLOBAL PROPERTY TARGETS)
    get_property(targets DIRECTORY PROPERTY BUILDSYSTEM_TARGETS)
    foreach(target ${targets})
        message("")
        get_target_property(target_type ${target} TYPE)
        get_target_property(target_sources ${target} SOURCES)
        get_target_property(target_include_dirs ${target} INCLUDE_DIRECTORIES)
        get_target_property(target_compile_options ${target} COMPILE_OPTIONS)
        get_target_property(target_link_libraries ${target} LINK_LIBRARIES)

        message("  Target: ${target}")
        message("    Type: ${target_type}")

        if(target_sources)
            message("    Sources:")
            foreach(source ${target_sources})
                message("      ${source}")
            endforeach()
        else()
            message("    No sources defined for this target.")
        endif()

        if(target_include_dirs)
            message("    Include Directories:")
            foreach(include_dir ${target_include_dirs})
                message("      ${include_dir}")
            endforeach()
        else()
            message("    No include directories defined for: ${target}.")
        endif()

        if(target_compile_options)
            message("    Compile Options:")
            foreach(compile_option ${target_compile_options})
                message("      ${compile_option}")
            endforeach()
        else()
            message("    No compile options defined for: ${target}.")
        endif()

        if(target_link_libraries)
            message("    Link Libraries:")
            foreach(link_library ${target_link_libraries})
                message("      ${link_library}")
            endforeach()
        else()
            message("    No link libraries defined for: ${target}.")
        endif()


        get_cmake_property(cmake_variables VARIABLES)

        set(VARIABLES_FOUND FALSE)

        #message("  Target Variables:")
        #foreach(cmake_variable ${cmake_variables})
        #    if(${cmake_variable} MATCHES "^${target}")
        #        message("    ${cmake_variable}: ${${cmake_variable}}")
        #        set(VARIABLES_FOUND TRUE)
        #    endif()
        #endforeach()

        #if(NOT VARIABLES_FOUND)
        #    message("    No variables for target: '${target}' found.")
        #endif()


        message("")
    endforeach()
endfunction()

function(print_cmake_packages)
    message("CMake Packages: ")
    get_cmake_packages(cmake_variables PACKAGES)
    foreach(package ${PACKAGES})
        message("")
        message("  Package: ${package}")
        get_cmake_property(cmake_variables VARIABLES)
        foreach(cmake_variable ${cmake_variables})
            if(cmake_variable MATCHES "^${package}")
                message("    ${cmake_variable} = ${${cmake_variable}}")
            endif()
        endforeach()
        message("")

    endforeach()
endfunction()

function(print_cmake_package_targets PACKAGE)
    get_package_targets("${PACKAGE}" RETURN_VALUE)
    set(package_targets ${RETURN_VALUE})
    foreach(package_target ${package_targets})
        message("    target: ${package_target}")
    endforeach()
endfunction()

function(die)
    message(FATAL_ERROR "ERROR: DIE. He's dead Jim!")
endfunction()

function(exit)
    message(FATAL_ERROR "This is not an error, cmake was intentionally terminated.")
endfunction()
